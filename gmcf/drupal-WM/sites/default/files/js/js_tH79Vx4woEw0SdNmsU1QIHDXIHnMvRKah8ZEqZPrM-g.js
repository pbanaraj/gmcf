/*!
  * domready (c) Dustin Diaz 2014 - License MIT
  */
!function(e,t){typeof module!="undefined"?module.exports=t():typeof define=="function"&&typeof define.amd=="object"?define(t):this[e]=t()}("domready",function(){var e=[],t,n=document,r=n.documentElement.doScroll,i="DOMContentLoaded",s=(r?/^loaded|^c/:/^loaded|^i|^c/).test(n.readyState);return s||n.addEventListener(i,t=function(){n.removeEventListener(i,t),s=1;while(t=e.shift())t()}),function(t){s?setTimeout(t,0):e.push(t)}});
/**
 * @file
 * Parse inline JSON and initialize the drupalSettings global object.
 */

(function () {

  'use strict';

  // Use direct child elements to harden against XSS exploits when CSP is on.
  var settingsElement = document.querySelector('head > script[type="application/json"][data-drupal-selector="drupal-settings-json"], body > script[type="application/json"][data-drupal-selector="drupal-settings-json"]');

  /**
   * Variable generated by Drupal with all the configuration created from PHP.
   *
   * @global
   *
   * @type {object}
   */
  window.drupalSettings = {};

  if (settingsElement !== null) {
    window.drupalSettings = JSON.parse(settingsElement.textContent);
  }
})();
;
/**
 * @file
 * Defines the Drupal JavaScript API.
 */

/**
 * A jQuery object, typically the return value from a `$(selector)` call.
 *
 * Holds an HTMLElement or a collection of HTMLElements.
 *
 * @typedef {object} jQuery
 *
 * @prop {number} length=0
 *   Number of elements contained in the jQuery object.
 */

/**
 * Variable generated by Drupal that holds all translated strings from PHP.
 *
 * Content of this variable is automatically created by Drupal when using the
 * Interface Translation module. It holds the translation of strings used on
 * the page.
 *
 * This variable is used to pass data from the backend to the frontend. Data
 * contained in `drupalSettings` is used during behavior initialization.
 *
 * @global
 *
 * @var {object} drupalTranslations
 */

/**
 * Global Drupal object.
 *
 * All Drupal JavaScript APIs are contained in this namespace.
 *
 * @global
 *
 * @namespace
 */
window.Drupal = {behaviors: {}, locale: {}};

// Class indicating that JavaScript is enabled; used for styling purpose.
document.documentElement.className += ' js';

// Allow other JavaScript libraries to use $.
if (window.jQuery) {
  jQuery.noConflict();
}

// JavaScript should be made compatible with libraries other than jQuery by
// wrapping it in an anonymous closure.
(function (domready, Drupal, drupalSettings, drupalTranslations) {

  'use strict';

  /**
   * Helper to rethrow errors asynchronously.
   *
   * This way Errors bubbles up outside of the original callstack, making it
   * easier to debug errors in the browser.
   *
   * @param {Error|string} error
   *   The error to be thrown.
   */
  Drupal.throwError = function (error) {
    setTimeout(function () { throw error; }, 0);
  };

  /**
   * Custom error thrown after attach/detach if one or more behaviors failed.
   * Initializes the JavaScript behaviors for page loads and Ajax requests.
   *
   * @callback Drupal~behaviorAttach
   *
   * @param {HTMLDocument|HTMLElement} context
   *   An element to detach behaviors from.
   * @param {?object} settings
   *   An object containing settings for the current context. It is rarely used.
   *
   * @see Drupal.attachBehaviors
   */

  /**
   * Reverts and cleans up JavaScript behavior initialization.
   *
   * @callback Drupal~behaviorDetach
   *
   * @param {HTMLDocument|HTMLElement} context
   *   An element to attach behaviors to.
   * @param {object} settings
   *   An object containing settings for the current context.
   * @param {string} trigger
   *   One of `'unload'`, `'move'`, or `'serialize'`.
   *
   * @see Drupal.detachBehaviors
   */

  /**
   * @typedef {object} Drupal~behavior
   *
   * @prop {Drupal~behaviorAttach} attach
   *   Function run on page load and after an Ajax call.
   * @prop {Drupal~behaviorDetach} detach
   *   Function run when content is serialized or removed from the page.
   */

  /**
   * Holds all initialization methods.
   *
   * @namespace Drupal.behaviors
   *
   * @type {Object.<string, Drupal~behavior>}
   */

  /**
   * Defines a behavior to be run during attach and detach phases.
   *
   * Attaches all registered behaviors to a page element.
   *
   * Behaviors are event-triggered actions that attach to page elements,
   * enhancing default non-JavaScript UIs. Behaviors are registered in the
   * {@link Drupal.behaviors} object using the method 'attach' and optionally
   * also 'detach'.
   *
   * {@link Drupal.attachBehaviors} is added below to the `jQuery.ready` event
   * and therefore runs on initial page load. Developers implementing Ajax in
   * their solutions should also call this function after new page content has
   * been loaded, feeding in an element to be processed, in order to attach all
   * behaviors to the new content.
   *
   * Behaviors should use `var elements =
   * $(context).find(selector).once('behavior-name');` to ensure the behavior is
   * attached only once to a given element. (Doing so enables the reprocessing
   * of given elements, which may be needed on occasion despite the ability to
   * limit behavior attachment to a particular element.)
   *
   * @example
   * Drupal.behaviors.behaviorName = {
   *   attach: function (context, settings) {
   *     // ...
   *   },
   *   detach: function (context, settings, trigger) {
   *     // ...
   *   }
   * };
   *
   * @param {HTMLDocument|HTMLElement} [context=document]
   *   An element to attach behaviors to.
   * @param {object} [settings=drupalSettings]
   *   An object containing settings for the current context. If none is given,
   *   the global {@link drupalSettings} object is used.
   *
   * @see Drupal~behaviorAttach
   * @see Drupal.detachBehaviors
   *
   * @throws {Drupal~DrupalBehaviorError}
   */
  Drupal.attachBehaviors = function (context, settings) {
    context = context || document;
    settings = settings || drupalSettings;
    var behaviors = Drupal.behaviors;
    // Execute all of them.
    for (var i in behaviors) {
      if (behaviors.hasOwnProperty(i) && typeof behaviors[i].attach === 'function') {
        // Don't stop the execution of behaviors in case of an error.
        try {
          behaviors[i].attach(context, settings);
        }
        catch (e) {
          Drupal.throwError(e);
        }
      }
    }
  };

  // Attach all behaviors.
  domready(function () { Drupal.attachBehaviors(document, drupalSettings); });

  /**
   * Detaches registered behaviors from a page element.
   *
   * Developers implementing Ajax in their solutions should call this function
   * before page content is about to be removed, feeding in an element to be
   * processed, in order to allow special behaviors to detach from the content.
   *
   * Such implementations should use `.findOnce()` and `.removeOnce()` to find
   * elements with their corresponding `Drupal.behaviors.behaviorName.attach`
   * implementation, i.e. `.removeOnce('behaviorName')`, to ensure the behavior
   * is detached only from previously processed elements.
   *
   * @param {HTMLDocument|HTMLElement} [context=document]
   *   An element to detach behaviors from.
   * @param {object} [settings=drupalSettings]
   *   An object containing settings for the current context. If none given,
   *   the global {@link drupalSettings} object is used.
   * @param {string} [trigger='unload']
   *   A string containing what's causing the behaviors to be detached. The
   *   possible triggers are:
   *   - `'unload'`: The context element is being removed from the DOM.
   *   - `'move'`: The element is about to be moved within the DOM (for example,
   *     during a tabledrag row swap). After the move is completed,
   *     {@link Drupal.attachBehaviors} is called, so that the behavior can undo
   *     whatever it did in response to the move. Many behaviors won't need to
   *     do anything simply in response to the element being moved, but because
   *     IFRAME elements reload their "src" when being moved within the DOM,
   *     behaviors bound to IFRAME elements (like WYSIWYG editors) may need to
   *     take some action.
   *   - `'serialize'`: When an Ajax form is submitted, this is called with the
   *     form as the context. This provides every behavior within the form an
   *     opportunity to ensure that the field elements have correct content
   *     in them before the form is serialized. The canonical use-case is so
   *     that WYSIWYG editors can update the hidden textarea to which they are
   *     bound.
   *
   * @throws {Drupal~DrupalBehaviorError}
   *
   * @see Drupal~behaviorDetach
   * @see Drupal.attachBehaviors
   */
  Drupal.detachBehaviors = function (context, settings, trigger) {
    context = context || document;
    settings = settings || drupalSettings;
    trigger = trigger || 'unload';
    var behaviors = Drupal.behaviors;
    // Execute all of them.
    for (var i in behaviors) {
      if (behaviors.hasOwnProperty(i) && typeof behaviors[i].detach === 'function') {
        // Don't stop the execution of behaviors in case of an error.
        try {
          behaviors[i].detach(context, settings, trigger);
        }
        catch (e) {
          Drupal.throwError(e);
        }
      }
    }
  };

  /**
   * Encodes special characters in a plain-text string for display as HTML.
   *
   * @param {string} str
   *   The string to be encoded.
   *
   * @return {string}
   *   The encoded string.
   *
   * @ingroup sanitization
   */
  Drupal.checkPlain = function (str) {
    str = str.toString()
      .replace(/&/g, '&amp;')
      .replace(/"/g, '&quot;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
    return str;
  };

  /**
   * Replaces placeholders with sanitized values in a string.
   *
   * @param {string} str
   *   A string with placeholders.
   * @param {object} args
   *   An object of replacements pairs to make. Incidences of any key in this
   *   array are replaced with the corresponding value. Based on the first
   *   character of the key, the value is escaped and/or themed:
   *    - `'!variable'`: inserted as is.
   *    - `'@variable'`: escape plain text to HTML ({@link Drupal.checkPlain}).
   *    - `'%variable'`: escape text and theme as a placeholder for user-
   *      submitted content ({@link Drupal.checkPlain} +
   *      `{@link Drupal.theme}('placeholder')`).
   *
   * @return {string}
   *   The formatted string.
   *
   * @see Drupal.t
   */
  Drupal.formatString = function (str, args) {
    // Keep args intact.
    var processedArgs = {};
    // Transform arguments before inserting them.
    for (var key in args) {
      if (args.hasOwnProperty(key)) {
        switch (key.charAt(0)) {
          // Escaped only.
          case '@':
            processedArgs[key] = Drupal.checkPlain(args[key]);
            break;

          // Pass-through.
          case '!':
            processedArgs[key] = args[key];
            break;

          // Escaped and placeholder.
          default:
            processedArgs[key] = Drupal.theme('placeholder', args[key]);
            break;
        }
      }
    }

    return Drupal.stringReplace(str, processedArgs, null);
  };

  /**
   * Replaces substring.
   *
   * The longest keys will be tried first. Once a substring has been replaced,
   * its new value will not be searched again.
   *
   * @param {string} str
   *   A string with placeholders.
   * @param {object} args
   *   Key-value pairs.
   * @param {Array|null} keys
   *   Array of keys from `args`. Internal use only.
   *
   * @return {string}
   *   The replaced string.
   */
  Drupal.stringReplace = function (str, args, keys) {
    if (str.length === 0) {
      return str;
    }

    // If the array of keys is not passed then collect the keys from the args.
    if (!Array.isArray(keys)) {
      keys = [];
      for (var k in args) {
        if (args.hasOwnProperty(k)) {
          keys.push(k);
        }
      }

      // Order the keys by the character length. The shortest one is the first.
      keys.sort(function (a, b) { return a.length - b.length; });
    }

    if (keys.length === 0) {
      return str;
    }

    // Take next longest one from the end.
    var key = keys.pop();
    var fragments = str.split(key);

    if (keys.length) {
      for (var i = 0; i < fragments.length; i++) {
        // Process each fragment with a copy of remaining keys.
        fragments[i] = Drupal.stringReplace(fragments[i], args, keys.slice(0));
      }
    }

    return fragments.join(args[key]);
  };

  /**
   * Translates strings to the page language, or a given language.
   *
   * See the documentation of the server-side t() function for further details.
   *
   * @param {string} str
   *   A string containing the English text to translate.
   * @param {Object.<string, string>} [args]
   *   An object of replacements pairs to make after translation. Incidences
   *   of any key in this array are replaced with the corresponding value.
   *   See {@link Drupal.formatString}.
   * @param {object} [options]
   *   Additional options for translation.
   * @param {string} [options.context='']
   *   The context the source string belongs to.
   *
   * @return {string}
   *   The formatted string.
   *   The translated string.
   */
  Drupal.t = function (str, args, options) {
    options = options || {};
    options.context = options.context || '';

    // Fetch the localized version of the string.
    if (typeof drupalTranslations !== 'undefined' && drupalTranslations.strings && drupalTranslations.strings[options.context] && drupalTranslations.strings[options.context][str]) {
      str = drupalTranslations.strings[options.context][str];
    }

    if (args) {
      str = Drupal.formatString(str, args);
    }
    return str;
  };

  /**
   * Returns the URL to a Drupal page.
   *
   * @param {string} path
   *   Drupal path to transform to URL.
   *
   * @return {string}
   *   The full URL.
   */
  Drupal.url = function (path) {
    return drupalSettings.path.baseUrl + drupalSettings.path.pathPrefix + path;
  };

  /**
   * Returns the passed in URL as an absolute URL.
   *
   * @param {string} url
   *   The URL string to be normalized to an absolute URL.
   *
   * @return {string}
   *   The normalized, absolute URL.
   *
   * @see https://github.com/angular/angular.js/blob/v1.4.4/src/ng/urlUtils.js
   * @see https://grack.com/blog/2009/11/17/absolutizing-url-in-javascript
   * @see https://github.com/jquery/jquery-ui/blob/1.11.4/ui/tabs.js#L53
   */
  Drupal.url.toAbsolute = function (url) {
    var urlParsingNode = document.createElement('a');

    // Decode the URL first; this is required by IE <= 6. Decoding non-UTF-8
    // strings may throw an exception.
    try {
      url = decodeURIComponent(url);
    }
    catch (e) {
      // Empty.
    }

    urlParsingNode.setAttribute('href', url);

    // IE <= 7 normalizes the URL when assigned to the anchor node similar to
    // the other browsers.
    return urlParsingNode.cloneNode(false).href;
  };

  /**
   * Returns true if the URL is within Drupal's base path.
   *
   * @param {string} url
   *   The URL string to be tested.
   *
   * @return {bool}
   *   `true` if local.
   *
   * @see https://github.com/jquery/jquery-ui/blob/1.11.4/ui/tabs.js#L58
   */
  Drupal.url.isLocal = function (url) {
    // Always use browser-derived absolute URLs in the comparison, to avoid
    // attempts to break out of the base path using directory traversal.
    var absoluteUrl = Drupal.url.toAbsolute(url);
    var protocol = location.protocol;

    // Consider URLs that match this site's base URL but use HTTPS instead of HTTP
    // as local as well.
    if (protocol === 'http:' && absoluteUrl.indexOf('https:') === 0) {
      protocol = 'https:';
    }
    var baseUrl = protocol + '//' + location.host + drupalSettings.path.baseUrl.slice(0, -1);

    // Decoding non-UTF-8 strings may throw an exception.
    try {
      absoluteUrl = decodeURIComponent(absoluteUrl);
    }
    catch (e) {
      // Empty.
    }
    try {
      baseUrl = decodeURIComponent(baseUrl);
    }
    catch (e) {
      // Empty.
    }

    // The given URL matches the site's base URL, or has a path under the site's
    // base URL.
    return absoluteUrl === baseUrl || absoluteUrl.indexOf(baseUrl + '/') === 0;
  };

  /**
   * Formats a string containing a count of items.
   *
   * This function ensures that the string is pluralized correctly. Since
   * {@link Drupal.t} is called by this function, make sure not to pass
   * already-localized strings to it.
   *
   * See the documentation of the server-side
   * \Drupal\Core\StringTranslation\TranslationInterface::formatPlural()
   * function for more details.
   *
   * @param {number} count
   *   The item count to display.
   * @param {string} singular
   *   The string for the singular case. Please make sure it is clear this is
   *   singular, to ease translation (e.g. use "1 new comment" instead of "1
   *   new"). Do not use @count in the singular string.
   * @param {string} plural
   *   The string for the plural case. Please make sure it is clear this is
   *   plural, to ease translation. Use @count in place of the item count, as in
   *   "@count new comments".
   * @param {object} [args]
   *   An object of replacements pairs to make after translation. Incidences
   *   of any key in this array are replaced with the corresponding value.
   *   See {@link Drupal.formatString}.
   *   Note that you do not need to include @count in this array.
   *   This replacement is done automatically for the plural case.
   * @param {object} [options]
   *   The options to pass to the {@link Drupal.t} function.
   *
   * @return {string}
   *   A translated string.
   */
  Drupal.formatPlural = function (count, singular, plural, args, options) {
    args = args || {};
    args['@count'] = count;

    var pluralDelimiter = drupalSettings.pluralDelimiter;
    var translations = Drupal.t(singular + pluralDelimiter + plural, args, options).split(pluralDelimiter);
    var index = 0;

    // Determine the index of the plural form.
    if (typeof drupalTranslations !== 'undefined' && drupalTranslations.pluralFormula) {
      index = count in drupalTranslations.pluralFormula ? drupalTranslations.pluralFormula[count] : drupalTranslations.pluralFormula['default'];
    }
    else if (args['@count'] !== 1) {
      index = 1;
    }

    return translations[index];
  };

  /**
   * Encodes a Drupal path for use in a URL.
   *
   * For aesthetic reasons slashes are not escaped.
   *
   * @param {string} item
   *   Unencoded path.
   *
   * @return {string}
   *   The encoded path.
   */
  Drupal.encodePath = function (item) {
    return window.encodeURIComponent(item).replace(/%2F/g, '/');
  };

  /**
   * Generates the themed representation of a Drupal object.
   *
   * All requests for themed output must go through this function. It examines
   * the request and routes it to the appropriate theme function. If the current
   * theme does not provide an override function, the generic theme function is
   * called.
   *
   * @example
   * <caption>To retrieve the HTML for text that should be emphasized and
   * displayed as a placeholder inside a sentence.</caption>
   * Drupal.theme('placeholder', text);
   *
   * @namespace
   *
   * @param {function} func
   *   The name of the theme function to call.
   * @param {...args}
   *   Additional arguments to pass along to the theme function.
   *
   * @return {string|object|HTMLElement|jQuery}
   *   Any data the theme function returns. This could be a plain HTML string,
   *   but also a complex object.
   */
  Drupal.theme = function (func) {
    var args = Array.prototype.slice.apply(arguments, [1]);
    if (func in Drupal.theme) {
      return Drupal.theme[func].apply(this, args);
    }
  };

  /**
   * Formats text for emphasized display in a placeholder inside a sentence.
   *
   * @param {string} str
   *   The text to format (plain-text).
   *
   * @return {string}
   *   The formatted text (html).
   */
  Drupal.theme.placeholder = function (str) {
    return '<em class="placeholder">' + Drupal.checkPlain(str) + '</em>';
  };

})(domready, Drupal, window.drupalSettings, window.drupalTranslations);
;
// bootstrap-rating - v1.4.0 - (c) 2016 dreyescat 
// https://github.com/dreyescat/bootstrap-rating MIT
!function(a,b){"use strict";function c(c,e){this.$input=a(c),this.$rating=a("<span></span>").css({cursor:"default"}).insertBefore(this.$input),this.options=function(c){return c.start=parseInt(c.start,10),c.start=isNaN(c.start)?b:c.start,c.stop=parseInt(c.stop,10),c.stop=isNaN(c.stop)?c.start+d||b:c.stop,c.step=parseInt(c.step,10)||b,c.fractions=Math.abs(parseInt(c.fractions,10))||b,c.scale=Math.abs(parseInt(c.scale,10))||b,c=a.extend({},a.fn.rating.defaults,c),c.filledSelected=c.filledSelected||c.filled,c}(a.extend({},this.$input.data(),e)),this._init()}var d=5;c.prototype={_init:function(){for(var c=this,d=this.$input,e=this.$rating,f=function(a){return function(c){d.prop("disabled")||d.prop("readonly")||d.data("readonly")!==b||a.call(this,c)}},g=1;g<=this._rateToIndex(this.options.stop);g++){var h=a('<div class="rating-symbol"></div>').css({display:"inline-block",position:"relative"});a('<div class="rating-symbol-background '+this.options.empty+'"></div>').appendTo(h),a('<div class="rating-symbol-foreground"></div>').append("<span></span>").css({display:"inline-block",position:"absolute",overflow:"hidden",left:0,right:0,width:0}).appendTo(h),e.append(h),this.options.extendSymbol.call(h,this._indexToRate(g))}this._updateRate(d.val()),d.on("change",function(){c._updateRate(a(this).val())});var i,j=function(b){var d=a(b.currentTarget),e=Math.abs((b.pageX||b.originalEvent.touches[0].pageX)-(("rtl"===d.css("direction")&&d.width())+d.offset().left));return e=e>0?e:.1*c.options.scale,d.index()+e/d.width()};e.on("mousedown touchstart",".rating-symbol",f(function(a){d.val(c._indexToRate(j(a))).change()})).on("mousemove touchmove",".rating-symbol",f(function(d){var e=c._roundToFraction(j(d));e!==i&&(i!==b&&a(this).trigger("rating.rateleave"),i=e,a(this).trigger("rating.rateenter",[c._indexToRate(i)])),c._fillUntil(e)})).on("mouseleave touchend",".rating-symbol",f(function(){i=b,a(this).trigger("rating.rateleave"),c._fillUntil(c._rateToIndex(parseFloat(d.val())))}))},_fillUntil:function(a){var b=this.$rating,c=Math.floor(a);b.find(".rating-symbol-background").css("visibility","visible").slice(0,c).css("visibility","hidden");var d=b.find(".rating-symbol-foreground");d.width(0),d.slice(0,c).width("auto").find("span").attr("class",this.options.filled),d.eq(a%1?c:c-1).find("span").attr("class",this.options.filledSelected),d.eq(c).width(a%1*100+"%")},_indexToRate:function(a){return this.options.start+Math.floor(a)*this.options.step+this.options.step*this._roundToFraction(a%1)},_rateToIndex:function(a){return(a-this.options.start)/this.options.step},_roundToFraction:function(a){var b=Math.ceil(a%1*this.options.fractions)/this.options.fractions,c=Math.pow(10,this.options.scale);return Math.floor(a)+Math.floor(b*c)/c},_contains:function(a){var b=this.options.step>0?this.options.start:this.options.stop,c=this.options.step>0?this.options.stop:this.options.start;return b<=a&&a<=c},_updateRate:function(a){var b=parseFloat(a);this._contains(b)?(this._fillUntil(this._rateToIndex(b)),this.$input.val(b)):""===a&&(this._fillUntil(0),this.$input.val(""))},rate:function(a){return a===b?this.$input.val():void this._updateRate(a)}},a.fn.rating=function(d){var e,f=Array.prototype.slice.call(arguments,1);return this.each(function(){var b=a(this),g=b.data("rating");g||b.data("rating",g=new c(this,d)),"string"==typeof d&&"_"!==d[0]&&(e=g[d].apply(g,f))}),e!==b?e:this},a.fn.rating.defaults={filled:"glyphicon glyphicon-star",filledSelected:b,empty:"glyphicon glyphicon-star-empty",start:0,stop:d,step:1,fractions:1,scale:3,extendSymbol:function(a){}},a(function(){a("input.rating").rating()})}(jQuery);;
/* jQuery Validation Plugin - v1.13.0 - 7/1/2014
 * http://jqueryvalidation.org/
 * Copyright (c) 2014 J�rn Zaefferer; Licensed MIT */
!function(b){"function"==typeof define&&define.amd?define(["jquery"],b):b(jQuery)}(function(f){f.extend(f.fn,{validate:function(g){if(!this.length){return void (g&&g.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing."))}var a=f.data(this[0],"validator");return a?a:(this.attr("novalidate","novalidate"),a=new f.validator(g,this[0]),f.data(this[0],"validator",a),a.settings.onsubmit&&(this.validateDelegate(":submit","click",function(c){a.settings.submitHandler&&(a.submitButton=c.target),f(c.target).hasClass("cancel")&&(a.cancelSubmit=!0),void 0!==f(c.target).attr("formnovalidate")&&(a.cancelSubmit=!0)}),this.submit(function(h){function c(){var b;return a.settings.submitHandler?(a.submitButton&&(b=f("<input type='hidden'/>").attr("name",a.submitButton.name).val(f(a.submitButton).val()).appendTo(a.currentForm)),a.settings.submitHandler.call(a,a.currentForm,h),a.submitButton&&b.remove(),!1):!0}return a.settings.debug&&h.preventDefault(),a.cancelSubmit?(a.cancelSubmit=!1,c()):a.form()?a.pendingRequest?(a.formSubmitted=!0,!1):c():(a.focusInvalid(),!1)})),a)},valid:function(){var g,a;return f(this[0]).is("form")?g=this.validate().form():(g=!0,a=f(this[0].form).validate(),this.each(function(){g=a.element(this)&&g})),g},removeAttrs:function(g){var h={},a=this;return f.each(g.split(/\s/),function(i,c){h[c]=a.attr(c),a.removeAttr(c)}),h},rules:function(a,k){var n,o,l,m,q,r,p=this[0];if(a){switch(n=f.data(p.form,"validator").settings,o=n.rules,l=f.validator.staticRules(p),a){case"add":f.extend(l,f.validator.normalizeRule(k)),delete l.messages,o[p.name]=l,k.messages&&(n.messages[p.name]=f.extend(n.messages[p.name],k.messages));break;case"remove":return k?(r={},f.each(k.split(/\s/),function(h,g){r[g]=l[g],delete l[g],"required"===g&&f(p).removeAttr("aria-required")}),r):(delete o[p.name],l)}}return m=f.validator.normalizeRules(f.extend({},f.validator.classRules(p),f.validator.attributeRules(p),f.validator.dataRules(p),f.validator.staticRules(p)),p),m.required&&(q=m.required,delete m.required,m=f.extend({required:q},m),f(p).attr("aria-required","true")),m.remote&&(q=m.remote,delete m.remote,m=f.extend(m,{remote:q})),m}}),f.extend(f.expr[":"],{blank:function(a){return !f.trim(""+f(a).val())},filled:function(a){return !!f.trim(""+f(a).val())},unchecked:function(a){return !f(a).prop("checked")}}),f.validator=function(g,a){this.settings=f.extend(!0,{},f.validator.defaults,g),this.currentForm=a,this.init()},f.validator.format=function(g,a){return 1===arguments.length?function(){var b=f.makeArray(arguments);return b.unshift(g),f.validator.format.apply(this,b)}:(arguments.length>2&&a.constructor!==Array&&(a=f.makeArray(arguments).slice(1)),a.constructor!==Array&&(a=[a]),f.each(a,function(h,b){g=g.replace(new RegExp("\\{"+h+"\\}","g"),function(){return b})}),g)},f.extend(f.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",validClass:"valid",errorElement:"label",focusInvalid:!0,errorContainer:f([]),errorLabelContainer:f([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(b){this.lastActive=b,this.settings.focusCleanup&&!this.blockFocusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,b,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(b)))},onfocusout:function(b){this.checkable(b)||!(b.name in this.submitted)&&this.optional(b)||this.element(b)},onkeyup:function(g,c){(9!==c.which||""!==this.elementValue(g))&&(g.name in this.submitted||g===this.lastElement)&&this.element(g)},onclick:function(b){b.name in this.submitted?this.element(b):b.parentNode.name in this.submitted&&this.element(b.parentNode)},highlight:function(g,h,a){"radio"===g.type?this.findByName(g.name).addClass(h).removeClass(a):f(g).addClass(h).removeClass(a)},unhighlight:function(g,h,a){"radio"===g.type?this.findByName(g.name).removeClass(h).addClass(a):f(g).removeClass(h).addClass(a)}},setDefaults:function(a){f.extend(f.validator.defaults,a)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date ( ISO ).",number:"Please enter a valid number.",digits:"Please enter only digits.",creditcard:"Please enter a valid credit card number.",equalTo:"Please enter the same value again.",maxlength:f.validator.format("Please enter no more than {0} characters."),minlength:f.validator.format("Please enter at least {0} characters."),rangelength:f.validator.format("Please enter a value between {0} and {1} characters long."),range:f.validator.format("Please enter a value between {0} and {1}."),max:f.validator.format("Please enter a value less than or equal to {0}."),min:f.validator.format("Please enter a value greater than or equal to {0}.")},autoCreateRanges:!1,prototype:{init:function(){function g(j){var k=f.data(this[0].form,"validator"),i="on"+j.type.replace(/^validate/,""),l=k.settings;l[i]&&!this.is(l.ignore)&&l[i].call(k,this[0],j)}this.labelContainer=f(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||f(this.currentForm),this.containers=f(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var h,a=this.groups={};f.each(this.settings.groups,function(j,i){"string"==typeof i&&(i=i.split(/\s/)),f.each(i,function(k,b){a[b]=j})}),h=this.settings.rules,f.each(h,function(i,c){h[i]=f.validator.normalizeRule(c)}),f(this.currentForm).validateDelegate(":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'] ,[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox']","focusin focusout keyup",g).validateDelegate("select, option, [type='radio'], [type='checkbox']","click",g),this.settings.invalidHandler&&f(this.currentForm).bind("invalid-form.validate",this.settings.invalidHandler),f(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required","true")},form:function(){return this.checkForm(),f.extend(this.submitted,this.errorMap),this.invalid=f.extend({},this.errorMap),this.valid()||f(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var g=0,c=this.currentElements=this.elements();c[g];g++){this.check(c[g])}return this.valid()},element:function(g){var h=this.clean(g),a=this.validationTargetFor(h),i=!0;return this.lastElement=a,void 0===a?delete this.invalid[h.name]:(this.prepareElement(a),this.currentElements=f(a),i=this.check(a)!==!1,i?delete this.invalid[a.name]:this.invalid[a.name]=!0),f(g).attr("aria-invalid",!i),this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),i},showErrors:function(g){if(g){f.extend(this.errorMap,g),this.errorList=[];for(var a in g){this.errorList.push({message:g[a],element:this.findByName(a)[0]})}this.successList=f.grep(this.successList,function(b){return !(b.name in g)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){f.fn.resetForm&&f(this.currentForm).resetForm(),this.submitted={},this.lastElement=null,this.prepareForm(),this.hideErrors(),this.elements().removeClass(this.settings.errorClass).removeData("previousValue").removeAttr("aria-invalid")},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(i){var g,h=0;for(g in i){h++}return h},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(b){b.not(this.containers).text(""),this.addWrapper(b).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid){try{f(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").focus().trigger("focusin")}catch(a){}}},findLastActive:function(){var a=this.lastActive;return a&&1===f.grep(this.errorList,function(b){return b.element.name===a.name}).length&&a},elements:function(){var g=this,a={};return f(this.currentForm).find("input, select, textarea").not(":submit, :reset, :image, [disabled]").not(this.settings.ignore).filter(function(){return !this.name&&g.settings.debug&&window.console&&console.error("%o has no name assigned",this),this.name in a||!g.objectLength(f(this).rules())?!1:(a[this.name]=!0,!0)})},clean:function(a){return f(a)[0]},errors:function(){var a=this.settings.errorClass.split(" ").join(".");return f(this.settings.errorElement+"."+a,this.errorContext)},reset:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=f([]),this.toHide=f([]),this.currentElements=f([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(b){this.reset(),this.toHide=this.errorsFor(b)},elementValue:function(g){var h,a=f(g),i=g.type;return"radio"===i||"checkbox"===i?f("input[name='"+g.name+"']:checked").val():"number"===i&&"undefined"!=typeof g.validity?g.validity.badInput?!1:a.val():(h=a.val(),"string"==typeof h?h.replace(/\r/g,""):h)},check:function(a){a=this.validationTargetFor(this.clean(a));var k,n,o,l=f(a).rules(),m=f.map(l,function(g,c){return c}).length,q=!1,r=this.elementValue(a);for(n in l){o={method:n,parameters:l[n]};try{if(k=f.validator.methods[n].call(this,r,a,o.parameters),"dependency-mismatch"===k&&1===m){q=!0;continue}if(q=!1,"pending"===k){return void (this.toHide=this.toHide.not(this.errorsFor(a)))}if(!k){return this.formatAndAdd(a,o),!1}}catch(p){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+a.id+", check the '"+o.method+"' method.",p),p}}if(!q){return this.objectLength(l)&&this.successList.push(a),!0}},customDataMessage:function(g,a){return f(g).data("msg"+a.charAt(0).toUpperCase()+a.substring(1).toLowerCase())||f(g).data("msg")},customMessage:function(i,g){var h=this.settings.messages[i];return h&&(h.constructor===String?h:h[g])},findDefined:function(){for(var b=0;b<arguments.length;b++){if(void 0!==arguments[b]){return arguments[b]}}return void 0},defaultMessage:function(g,a){return this.findDefined(this.customMessage(g.name,a),this.customDataMessage(g,a),!this.settings.ignoreTitle&&g.title||void 0,f.validator.messages[a],"<strong>Warning: No message defined for "+g.name+"</strong>")},formatAndAdd:function(g,h){var a=this.defaultMessage(g,h.method),i=/\$?\{(\d+)\}/g;"function"==typeof a?a=a.call(this,h.parameters,g):i.test(a)&&(a=f.validator.format(a.replace(i,"{$1}"),h.parameters)),this.errorList.push({message:a,element:g,method:h.method}),this.errorMap[g.name]=a,this.submitted[g.name]=a},addWrapper:function(b){return this.settings.wrapper&&(b=b.add(b.parent(this.settings.wrapper))),b},defaultShowErrors:function(){var i,g,h;for(i=0;this.errorList[i];i++){h=this.errorList[i],this.settings.highlight&&this.settings.highlight.call(this,h.element,this.settings.errorClass,this.settings.validClass),this.showLabel(h.element,h.message)}if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success){for(i=0;this.successList[i];i++){this.showLabel(this.successList[i])}}if(this.settings.unhighlight){for(i=0,g=this.validElements();g[i];i++){this.settings.unhighlight.call(this,g[i],this.settings.errorClass,this.settings.validClass)}}this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return f(this.errorList).map(function(){return this.element})},showLabel:function(a,j){var m,n,k,l=this.errorsFor(a),o=this.idOrName(a),p=f(a).attr("aria-describedby");l.length?(l.removeClass(this.settings.validClass).addClass(this.settings.errorClass),l.html(j)):(l=f("<"+this.settings.errorElement+">").attr("id",o+"-error").addClass(this.settings.errorClass).html(j||""),m=l,this.settings.wrapper&&(m=l.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(m):this.settings.errorPlacement?this.settings.errorPlacement(m,f(a)):m.insertAfter(a),l.is("label")?l.attr("for",o):0===l.parents("label[for='"+o+"']").length&&(k=l.attr("id"),p?p.match(new RegExp("\b"+k+"\b"))||(p+=" "+k):p=k,f(a).attr("aria-describedby",p),n=this.groups[a.name],n&&f.each(this.groups,function(h,g){g===n&&f("[name='"+h+"']",this.currentForm).attr("aria-describedby",l.attr("id"))}))),!j&&this.settings.success&&(l.text(""),"string"==typeof this.settings.success?l.addClass(this.settings.success):this.settings.success(l,a)),this.toShow=this.toShow.add(l)},errorsFor:function(g){var h=this.idOrName(g),a=f(g).attr("aria-describedby"),i="label[for='"+h+"'], label[for='"+h+"'] *";return a&&(i=i+", #"+a.replace(/\s+/g,", #")),this.errors().filter(i)},idOrName:function(b){return this.groups[b.name]||(this.checkable(b)?b.name:b.id||b.name)},validationTargetFor:function(b){return this.checkable(b)&&(b=this.findByName(b.name).not(this.settings.ignore)[0]),b},checkable:function(b){return/radio|checkbox/i.test(b.type)},findByName:function(a){return f(this.currentForm).find("[name='"+a+"']")},getLength:function(g,a){switch(a.nodeName.toLowerCase()){case"select":return f("option:selected",a).length;case"input":if(this.checkable(a)){return this.findByName(a.name).filter(":checked").length}}return g.length},depend:function(g,c){return this.dependTypes[typeof g]?this.dependTypes[typeof g](g,c):!0},dependTypes:{"boolean":function(b){return b},string:function(g,a){return !!f(g,a.form).length},"function":function(g,c){return g(c)}},optional:function(g){var a=this.elementValue(g);return !f.validator.methods.required.call(this,a,g)&&"dependency-mismatch"},startRequest:function(b){this.pending[b.name]||(this.pendingRequest++,this.pending[b.name]=!0)},stopRequest:function(g,a){this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[g.name],a&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(f(this.currentForm).submit(),this.formSubmitted=!1):!a&&0===this.pendingRequest&&this.formSubmitted&&(f(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(a){return f.data(a,"previousValue")||f.data(a,"previousValue",{old:null,valid:!0,message:this.defaultMessage(a,"remote")})}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(g,a){g.constructor===String?this.classRuleSettings[g]=a:f.extend(this.classRuleSettings,g)},classRules:function(g){var h={},a=f(g).attr("class");return a&&f.each(a.split(" "),function(){this in f.validator.classRuleSettings&&f.extend(h,f.validator.classRuleSettings[this])}),h},attributeRules:function(a){var h,k,l={},i=f(a),j=a.getAttribute("type");for(h in f.validator.methods){"required"===h?(k=a.getAttribute(h),""===k&&(k=!0),k=!!k):k=i.attr(h),/min|max/.test(h)&&(null===j||/number|range|text/.test(j))&&(k=Number(k)),k||0===k?l[h]=k:j===h&&"range"!==j&&(l[h]=!0)}return l.maxlength&&/-1|2147483647|524288/.test(l.maxlength)&&delete l.maxlength,l},dataRules:function(g){var h,a,i={},j=f(g);for(h in f.validator.methods){a=j.data("rule"+h.charAt(0).toUpperCase()+h.substring(1).toLowerCase()),void 0!==a&&(i[h]=a)}return i},staticRules:function(g){var h={},a=f.data(g.form,"validator");return a.settings.rules&&(h=f.validator.normalizeRule(a.settings.rules[g.name])||{}),h},normalizeRules:function(g,a){return f.each(g,function(b,c){if(c===!1){return void delete g[b]}if(c.param||c.depends){var h=!0;switch(typeof c.depends){case"string":h=!!f(c.depends,a.form).length;break;case"function":h=c.depends.call(a,a)}h?g[b]=void 0!==c.param?c.param:!0:delete g[b]}}),f.each(g,function(c,b){g[c]=f.isFunction(b)?b(a):b}),f.each(["minlength","maxlength"],function(){g[this]&&(g[this]=Number(g[this]))}),f.each(["rangelength","range"],function(){var b;g[this]&&(f.isArray(g[this])?g[this]=[Number(g[this][0]),Number(g[this][1])]:"string"==typeof g[this]&&(b=g[this].replace(/[\[\]]/g,"").split(/[\s,]+/),g[this]=[Number(b[0]),Number(b[1])]))}),f.validator.autoCreateRanges&&(g.min&&g.max&&(g.range=[g.min,g.max],delete g.min,delete g.max),g.minlength&&g.maxlength&&(g.rangelength=[g.minlength,g.maxlength],delete g.minlength,delete g.maxlength)),g},normalizeRule:function(g){if("string"==typeof g){var a={};f.each(g.split(/\s/),function(){a[this]=!0}),g=a}return g},addMethod:function(g,h,a){f.validator.methods[g]=h,f.validator.messages[g]=void 0!==a?a:f.validator.messages[g],h.length<3&&f.validator.addClassRules(g,f.validator.normalizeRule(g))},methods:{required:function(g,h,a){if(!this.depend(a,h)){return"dependency-mismatch"}if("select"===h.nodeName.toLowerCase()){var i=f(h).val();return i&&i.length>0}return this.checkable(h)?this.getLength(g,h)>0:f.trim(g).length>0},email:function(g,c){return this.optional(c)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(g)},url:function(g,c){return this.optional(c)||/^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(g)},date:function(g,c){return this.optional(c)||!/Invalid|NaN/.test(new Date(g).toString())},dateISO:function(g,c){return this.optional(c)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(g)},number:function(g,c){return this.optional(c)||/^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(g)},digits:function(g,c){return this.optional(c)||/^\d+$/.test(g)},creditcard:function(j,h){if(this.optional(h)){return"dependency-mismatch"}if(/[^0-9 \-]+/.test(j)){return !1}var i,m,n=0,k=0,l=!1;if(j=j.replace(/\D/g,""),j.length<13||j.length>19){return !1}for(i=j.length-1;i>=0;i--){m=j.charAt(i),k=parseInt(m,10),l&&(k*=2)>9&&(k-=9),n+=k,l=!l}return n%10===0},minlength:function(g,h,a){var i=f.isArray(g)?g.length:this.getLength(f.trim(g),h);return this.optional(h)||i>=a},maxlength:function(g,h,a){var i=f.isArray(g)?g.length:this.getLength(f.trim(g),h);return this.optional(h)||a>=i},rangelength:function(g,h,a){var i=f.isArray(g)?g.length:this.getLength(f.trim(g),h);return this.optional(h)||i>=a[0]&&i<=a[1]},min:function(i,g,h){return this.optional(g)||i>=h},max:function(i,g,h){return this.optional(g)||h>=i},range:function(i,g,h){return this.optional(g)||i>=h[0]&&i<=h[1]},equalTo:function(g,h,a){var i=f(a);return this.settings.onfocusout&&i.unbind(".validate-equalTo").bind("blur.validate-equalTo",function(){f(h).valid()}),g===i.val()},remote:function(a,h,k){if(this.optional(h)){return"dependency-mismatch"}var l,i,j=this.previousValue(h);return this.settings.messages[h.name]||(this.settings.messages[h.name]={}),j.originalMessage=this.settings.messages[h.name].remote,this.settings.messages[h.name].remote=j.message,k="string"==typeof k&&{url:k}||k,j.old===a?j.valid:(j.old=a,l=this,this.startRequest(h),i={},i[h.name]=a,f.ajax(f.extend(!0,{url:k,mode:"abort",port:"validate"+h.name,dataType:"json",data:i,context:l.currentForm,success:function(b){var n,c,g,m=b===!0||"true"===b;l.settings.messages[h.name].remote=j.originalMessage,m?(g=l.formSubmitted,l.prepareElement(h),l.formSubmitted=g,l.successList.push(h),delete l.invalid[h.name],l.showErrors()):(n={},c=b||l.defaultMessage(h,"remote"),n[h.name]=j.message=f.isFunction(c)?c(a):c,l.invalid[h.name]=!0,l.showErrors(n)),j.valid=m,l.stopRequest(h,m)}},k)),"pending")}}}),f.format=function(){throw"$.format has been deprecated. Please use $.validator.format instead."};var d,e={};f.ajaxPrefilter?f.ajaxPrefilter(function(i,g,c){var h=i.port;"abort"===i.mode&&(e[h]&&e[h].abort(),e[h]=c)}):(d=f.ajax,f.ajax=function(a){var b=("mode" in a?a:f.ajaxSettings).mode,c=("port" in a?a:f.ajaxSettings).port;return"abort"===b?(e[c]&&e[c].abort(),e[c]=d.apply(this,arguments),e[c]):d.apply(this,arguments)}),f.extend(f.fn,{validateDelegate:function(g,h,a){return this.bind(h,function(b){var i=f(b.target);return i.is(g)?a.apply(i,arguments):void 0})}})});;
(function($){$.browserTest=function(a,z){var u='unknown',x='X',m=function(r,h){for(var i=0;i<h.length;i=i+1){r=r.replace(h[i][0],h[i][1]);}return r;},c=function(i,a,b,c){var r={name:m((a.exec(i)||[u,u])[1],b)};r[r.name]=true;r.version=(c.exec(i)||[x,x,x,x])[3];if(r.name.match(/safari/)&&r.version>400){r.version='2.0';}if(r.name==='presto'){r.version=($.browser.version>9.27)?'futhark':'linear_b';}r.versionNumber=parseFloat(r.version,10)||0;r.versionX=(r.version!==x)?(r.version+'').substr(0,1):x;r.className=r.name+r.versionX;return r;};a=(a.match(/Opera|Navigator|Minefield|KHTML|Chrome/)?m(a,[[/(Firefox|MSIE|KHTML,\slike\sGecko|Konqueror)/,''],['Chrome Safari','Chrome'],['KHTML','Konqueror'],['Minefield','Firefox'],['Navigator','Netscape']]):a).toLowerCase();$.browser=$.extend((!z)?$.browser:{},c(a,/(camino|chrome|firefox|netscape|konqueror|lynx|msie|opera|safari)/,[],/(camino|chrome|firefox|netscape|netscape6|opera|version|konqueror|lynx|msie|safari)(\/|\s)([a-z0-9\.\+]*?)(\;|dev|rel|\s|$)/));$.layout=c(a,/(gecko|konqueror|msie|opera|webkit)/,[['konqueror','khtml'],['msie','trident'],['opera','presto']],/(applewebkit|rv|konqueror|msie)(\:|\/|\s)([a-z0-9\.]*?)(\;|\)|\s)/);$.os={name:(/(win|mac|linux|sunos|solaris|iphone)/.exec(navigator.platform.toLowerCase())||[u])[0].replace('sunos','solaris')};if(!z){$('html').addClass([$.os.name,$.browser.name,$.browser.className,$.layout.name,$.layout.className].join(' '));}};$.browserTest(navigator.userAgent);})(jQuery);;
/*
	Masked Input plugin for jQuery
	Copyright (c) 2007-2011 Josh Bush (digitalbush.com)
	Licensed under the MIT license (http://digitalbush.com/projects/masked-input-plugin/#license) 
	Version: 1.3
*/
(function(a){var b=(a.browser.msie?"paste":"input")+".mask",c=window.orientation!=undefined;a.mask={definitions:{9:"[0-9]",a:"[A-Za-z]","*":"[A-Za-z0-9]"},dataName:"rawMaskFn"},a.fn.extend({caret:function(a,b){if(this.length!=0){if(typeof a=="number"){b=typeof b=="number"?b:a;return this.each(function(){if(this.setSelectionRange)this.setSelectionRange(a,b);else if(this.createTextRange){var c=this.createTextRange();c.collapse(!0),c.moveEnd("character",b),c.moveStart("character",a),c.select()}})}if(this[0].setSelectionRange)a=this[0].selectionStart,b=this[0].selectionEnd;else if(document.selection&&document.selection.createRange){var c=document.selection.createRange();a=0-c.duplicate().moveStart("character",-1e5),b=a+c.text.length}return{begin:a,end:b}}},unmask:function(){return this.trigger("unmask")},mask:function(d,e){if(!d&&this.length>0){var f=a(this[0]);return f.data(a.mask.dataName)()}e=a.extend({placeholder:"_",completed:null},e);var g=a.mask.definitions,h=[],i=d.length,j=null,k=d.length;a.each(d.split(""),function(a,b){b=="?"?(k--,i=a):g[b]?(h.push(new RegExp(g[b])),j==null&&(j=h.length-1)):h.push(null)});return this.trigger("unmask").each(function(){function v(a){var b=f.val(),c=-1;for(var d=0,g=0;d<k;d++)if(h[d]){l[d]=e.placeholder;while(g++<b.length){var m=b.charAt(g-1);if(h[d].test(m)){l[d]=m,c=d;break}}if(g>b.length)break}else l[d]==b.charAt(g)&&d!=i&&(g++,c=d);if(!a&&c+1<i)f.val(""),t(0,k);else if(a||c+1>=i)u(),a||f.val(f.val().substring(0,c+1));return i?d:j}function u(){return f.val(l.join("")).val()}function t(a,b){for(var c=a;c<b&&c<k;c++)h[c]&&(l[c]=e.placeholder)}function s(a){var b=a.which,c=f.caret();if(a.ctrlKey||a.altKey||a.metaKey||b<32)return!0;if(b){c.end-c.begin!=0&&(t(c.begin,c.end),p(c.begin,c.end-1));var d=n(c.begin-1);if(d<k){var g=String.fromCharCode(b);if(h[d].test(g)){q(d),l[d]=g,u();var i=n(d);f.caret(i),e.completed&&i>=k&&e.completed.call(f)}}return!1}}function r(a){var b=a.which;if(b==8||b==46||c&&b==127){var d=f.caret(),e=d.begin,g=d.end;g-e==0&&(e=b!=46?o(e):g=n(e-1),g=b==46?n(g):g),t(e,g),p(e,g-1);return!1}if(b==27){f.val(m),f.caret(0,v());return!1}}function q(a){for(var b=a,c=e.placeholder;b<k;b++)if(h[b]){var d=n(b),f=l[b];l[b]=c;if(d<k&&h[d].test(f))c=f;else break}}function p(a,b){if(!(a<0)){for(var c=a,d=n(b);c<k;c++)if(h[c]){if(d<k&&h[c].test(l[d]))l[c]=l[d],l[d]=e.placeholder;else break;d=n(d)}u(),f.caret(Math.max(j,a))}}function o(a){while(--a>=0&&!h[a]);return a}function n(a){while(++a<=k&&!h[a]);return a}var f=a(this),l=a.map(d.split(""),function(a,b){if(a!="?")return g[a]?e.placeholder:a}),m=f.val();f.data(a.mask.dataName,function(){return a.map(l,function(a,b){return h[b]&&a!=e.placeholder?a:null}).join("")}),f.attr("readonly")||f.one("unmask",function(){f.unbind(".mask").removeData(a.mask.dataName)}).bind("focus.mask",function(){m=f.val();var b=v();u();var c=function(){b==d.length?f.caret(0,b):f.caret(b)};(a.browser.msie?c:function(){setTimeout(c,0)})()}).bind("blur.mask",function(){v(),f.val()!=m&&f.change()}).bind("keydown.mask",r).bind("keypress.mask",s).bind(b,function(){setTimeout(function(){f.caret(v(!0))},0)}),v()})}})})(jQuery);
/**
* autoNumeric.js
* @author: Bob Knothe
* @author: Sokolov Yura aka funny_falcon
* @version: 1.9.17 - 2013-12-03 GMT 9:00 PM
*
* Created by Robert J. Knothe on 2010-10-25. Please report any bugs to https://github.com/BobKnothe/autoNumeric
* Created by Sokolov Yura on 2010-11-07
*
* Copyright (c) 2011 Robert J. Knothe http://www.decorplanit.com/plugin/
*
* The MIT License (http://www.opensource.org/licenses/mit-license.php)
*
* Permission is hereby granted, free of charge, to any person
* obtaining a copy of this software and associated documentation
* files (the "Software"), to deal in the Software without
* restriction, including without limitation the rights to use,
* copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following
* conditions:
*
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*/
(function ($) {
    "use strict";
    /*jslint browser: true*/
    /*global jQuery: false*/
    /* Cross browser routine for getting selected range/cursor position
     */
    function getElementSelection(that) {
        var position = {};
        if (that.selectionStart === undefined) {
            that.focus();
            var select = document.selection.createRange();
            position.length = select.text.length;
            select.moveStart('character', -that.value.length);
            position.end = select.text.length;
            position.start = position.end - position.length;
        } else {
            position.start = that.selectionStart;
            position.end = that.selectionEnd;
            position.length = position.end - position.start;
        }
        return position;
    }
    /**
     * Cross browser routine for setting selected range/cursor position
     */
    function setElementSelection(that, start, end) {
        if (that.selectionStart === undefined) {
            that.focus();
            var r = that.createTextRange();
            r.collapse(true);
            r.moveEnd('character', end);
            r.moveStart('character', start);
            r.select();
        } else {
            that.selectionStart = start;
            that.selectionEnd = end;
        }
    }
    /**
     * run callbacks in parameters if any
     * any parameter could be a callback:
     * - a function, which invoked with jQuery element, parameters and this parameter name and returns parameter value
     * - a name of function, attached to $(selector).autoNumeric.functionName(){} - which was called previously
     */
    function runCallbacks($this, settings) {
        /**
         * loops through the settings object (option array) to find the following
         * k = option name example k=aNum
         * val = option value example val=0123456789
         */
        $.each(settings, function (k, val) {
            if (typeof val === 'function') {
                settings[k] = val($this, settings, k);
            } else if (typeof $this.autoNumeric[val] === 'function') {
                /**
                 * calls the attached function from the html5 data example: data-a-sign="functionName"
                 */
                settings[k] = $this.autoNumeric[val]($this, settings, k);
            }
        });
    }
    function convertKeyToNumber(settings, key) {
        if (typeof (settings[key]) === 'string') {
            settings[key] *= 1;
        }
    }
    /**
     * Preparing user defined options for further usage
     * merge them with defaults appropriately
     */
    function autoCode($this, settings) {
        runCallbacks($this, settings);
        settings.oEvent = null;
        settings.tagList = ['B', 'CAPTION', 'CITE', 'CODE', 'DD', 'DEL', 'DIV', 'DFN', 'DT', 'EM', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'INS', 'KDB', 'LABEL', 'LI', 'OUTPUT', 'P', 'Q', 'S', 'SAMPLE', 'SPAN', 'STRONG', 'TD', 'TH', 'U', 'VAR'];
        var vmax = settings.vMax.toString().split('.'),
            vmin = (!settings.vMin && settings.vMin !== 0) ? [] : settings.vMin.toString().split('.');
        convertKeyToNumber(settings, 'vMax');
        convertKeyToNumber(settings, 'vMin');
        convertKeyToNumber(settings, 'mDec'); /** set mDec if not defained by user */
        settings.allowLeading = true;
        settings.aNeg = settings.vMin < 0 ? '-' : '';
        vmax[0] = vmax[0].replace('-', '');
        vmin[0] = vmin[0].replace('-', '');
        settings.mInt = Math.max(vmax[0].length, vmin[0].length, 1);
        if (settings.mDec === null) {
            var vmaxLength = 0,
                vminLength = 0;
            if (vmax[1]) {
                vmaxLength = vmax[1].length;
            }
            if (vmin[1]) {
                vminLength = vmin[1].length;
            }
            settings.mDec = Math.max(vmaxLength, vminLength);
        } /** set alternative decimal separator key */
        if (settings.altDec === null && settings.mDec > 0) {
            if (settings.aDec === '.' && settings.aSep !== ',') {
                settings.altDec = ',';
            } else if (settings.aDec === ',' && settings.aSep !== '.') {
                settings.altDec = '.';
            }
        }
        /** cache regexps for autoStrip */
        var aNegReg = settings.aNeg ? '([-\\' + settings.aNeg + ']?)' : '(-?)';
        settings.aNegRegAutoStrip = aNegReg;
        settings.skipFirstAutoStrip = new RegExp(aNegReg + '[^-' + (settings.aNeg ? '\\' + settings.aNeg : '') + '\\' + settings.aDec + '\\d]' + '.*?(\\d|\\' + settings.aDec + '\\d)');
        settings.skipLastAutoStrip = new RegExp('(\\d\\' + settings.aDec + '?)[^\\' + settings.aDec + '\\d]\\D*$');
        var allowed = '-' + settings.aNum + '\\' + settings.aDec;
        settings.allowedAutoStrip = new RegExp('[^' + allowed + ']', 'gi');
        settings.numRegAutoStrip = new RegExp(aNegReg + '(?:\\' + settings.aDec + '?(\\d+\\' + settings.aDec + '\\d+)|(\\d*(?:\\' + settings.aDec + '\\d*)?))');
        return settings;
    }
    /**
     * strip all unwanted characters and leave only a number alert
     */
    function autoStrip(s, settings, strip_zero) {
        if (settings.aSign) { /** remove currency sign */
            while (s.indexOf(settings.aSign) > -1) {
                s = s.replace(settings.aSign, '');
            }
        }
        s = s.replace(settings.skipFirstAutoStrip, '$1$2'); /** first replace anything before digits */
        s = s.replace(settings.skipLastAutoStrip, '$1'); /** then replace anything after digits */
        s = s.replace(settings.allowedAutoStrip, ''); /** then remove any uninterested characters */
        if (settings.altDec) {
            s = s.replace(settings.altDec, settings.aDec);
        } /** get only number string */
        var m = s.match(settings.numRegAutoStrip);
        s = m ? [m[1], m[2], m[3]].join('') : '';
        if ((settings.lZero === 'allow' || settings.lZero === 'keep') && strip_zero !== 'strip') {
            var parts = [],
                nSign = '';
            parts = s.split(settings.aDec);
            if (parts[0].indexOf('-') !== -1) {
                nSign = '-';
                parts[0] = parts[0].replace('-', '');
            }
            if (parts[0].length > settings.mInt && parts[0].charAt(0) === '0') { /** strip leading zero if need */
                parts[0] = parts[0].slice(1);
            }
            s = nSign + parts.join(settings.aDec);
        }
        if ((strip_zero && settings.lZero === 'deny') || (strip_zero && settings.lZero === 'allow' && settings.allowLeading === false)) {
            var strip_reg = '^' + settings.aNegRegAutoStrip + '0*(\\d' + (strip_zero === 'leading' ? ')' : '|$)');
            strip_reg = new RegExp(strip_reg);
            s = s.replace(strip_reg, '$1$2');
        }
        return s;
    }
    /**
     * places or removes brackets on negative values
     */
    function negativeBracket(s, nBracket, oEvent) { /** oEvent = settings.oEvent */
        nBracket = nBracket.split(',');
        if (oEvent === 'set' || oEvent === 'focusout') {
            s = s.replace('-', '');
            s = nBracket[0] + s + nBracket[1];
        } else if ((oEvent === 'get' || oEvent === 'focusin' || oEvent === 'pageLoad') && s.charAt(0) === nBracket[0]) {
            s = s.replace(nBracket[0], '-');
            s = s.replace(nBracket[1], '');
        }
        return s;
    }
    /**
     * truncate decimal part of a number
     */
    function truncateDecimal(s, aDec, mDec) {
        if (aDec && mDec) {
            var parts = s.split(aDec);
            /** truncate decimal part to satisfying length
             * cause we would round it anyway */
            if (parts[1] && parts[1].length > mDec) {
                if (mDec > 0) {
                    parts[1] = parts[1].substring(0, mDec);
                    s = parts.join(aDec);
                } else {
                    s = parts[0];
                }
            }
        }
        return s;
    }
    /**
     * prepare number string to be converted to real number
     */
    function fixNumber(s, aDec, aNeg) {
        if (aDec && aDec !== '.') {
            s = s.replace(aDec, '.');
        }
        if (aNeg && aNeg !== '-') {
            s = s.replace(aNeg, '-');
        }
        if (!s.match(/\d/)) {
            s += '0';
        }
        return s;
    }
    /**
     * function to handle numbers less than 0 that are stored in Exponential notation ex: .0000001 stored as 1e-7
     */
    function checkValue(value, settings) {
        var decimal = value.indexOf('.'),
            checkSmall = +value;
        if (decimal !== -1) {
            if (checkSmall < 0.000001 && checkSmall > -1) {
                value = +value;
                if (value < 0.000001 && value > 0) {
                    value = (value + 10).toString();
                    value = value.substring(1);
                }
                if (value < 0 && value > -1) {
                    value = (value - 10).toString();
                    value = '-' + value.substring(2);
                }
                value = value.toString();
            } else {
                var parts = value.split('.');
                if (parts[1] !== undefined) {
                    if (+parts[1] === 0) {
                        value = parts[0];
                    } else {
                        parts[1] = parts[1].replace(/0*$/, '');
                        value = parts.join('.');
                    }
                }
            }
        }
        return (settings.lZero === 'keep') ? value : value.replace(/^0*(\d)/, '$1');
    }
    /**
     * prepare real number to be converted to our format
     */
    function presentNumber(s, aDec, aNeg) {
        if (aNeg && aNeg !== '-') {
            s = s.replace('-', aNeg);
        }
        if (aDec && aDec !== '.') {
            s = s.replace('.', aDec);
        }
        return s;
    }
    /**
     * checking that number satisfy format conditions
     * and lays between settings.vMin and settings.vMax
     * and the string length does not exceed the digits in settings.vMin and settings.vMax
     */
    function autoCheck(s, settings) {
        s = autoStrip(s, settings);
        s = truncateDecimal(s, settings.aDec, settings.mDec);
        s = fixNumber(s, settings.aDec, settings.aNeg);
        var value = +s;
        if (settings.oEvent === 'set' && (value < settings.vMin || value > settings.vMax)) {
            $.error("The value (" + value + ") from the 'set' method falls outside of the vMin / vMax range");
        }
        return value >= settings.vMin && value <= settings.vMax;
    }
    /**
     * private function to check for empty value
     */
    function checkEmpty(iv, settings, signOnEmpty) {
        if (iv === '' || iv === settings.aNeg) {
            if (settings.wEmpty === 'zero') {
                return iv + '0';
            }
            if (settings.wEmpty === 'sign' || signOnEmpty) {
                return iv + settings.aSign;
            }
            return iv;
        }
        return null;
    }
    /**
     * private function that formats our number
     */
    function autoGroup(iv, settings) {
        iv = autoStrip(iv, settings);
        var testNeg = iv.replace(',', '.'),
            empty = checkEmpty(iv, settings, true);
        if (empty !== null) {
            return empty;
        }
        var digitalGroup = '';
        if (settings.dGroup === 2) {
            digitalGroup = /(\d)((\d)(\d{2}?)+)$/;
        } else if (settings.dGroup === 4) {
            digitalGroup = /(\d)((\d{4}?)+)$/;
        } else {
            digitalGroup = /(\d)((\d{3}?)+)$/;
        } /** splits the string at the decimal string */
        var ivSplit = iv.split(settings.aDec);
        if (settings.altDec && ivSplit.length === 1) {
            ivSplit = iv.split(settings.altDec);
        } /** assigns the whole number to the a varibale (s) */
        var s = ivSplit[0];
        if (settings.aSep) {
            while (digitalGroup.test(s)) { /** re-inserts the thousand sepparator via a regualer expression */
                s = s.replace(digitalGroup, '$1' + settings.aSep + '$2');
            }
        }
        if (settings.mDec !== 0 && ivSplit.length > 1) {
            if (ivSplit[1].length > settings.mDec) {
                ivSplit[1] = ivSplit[1].substring(0, settings.mDec);
            } /** joins the whole number with the deciaml value */
            iv = s + settings.aDec + ivSplit[1];
        } else { /** if whole numbers only */
            iv = s;
        }
        if (settings.aSign) {
            var has_aNeg = iv.indexOf(settings.aNeg) !== -1;
            iv = iv.replace(settings.aNeg, '');
            iv = settings.pSign === 'p' ? settings.aSign + iv : iv + settings.aSign;
            if (has_aNeg) {
                iv = settings.aNeg + iv;
            }
        }
        if (settings.oEvent === 'set' && testNeg < 0 && settings.nBracket !== null) { /** removes the negative sign and places brackets */
            iv = negativeBracket(iv, settings.nBracket, settings.oEvent);
        }
        return iv;
    }
    /**
     * round number after setting by pasting or $().autoNumericSet()
     * private function for round the number
     * please note this handled as text - JavaScript math function can return inaccurate values
     * also this offers multiple rounding methods that are not easily accomplished in JavaScript
     */
    function autoRound(iv, settings) { /** value to string */
        iv = (iv === '') ? '0' : iv.toString();
        convertKeyToNumber(settings, 'mDec'); /** set mDec to number needed when mDec set by 'update method */
        var ivRounded = '',
            i = 0,
            nSign = '',
            rDec = (typeof (settings.aPad) === 'boolean' || settings.aPad === null) ? (settings.aPad ? settings.mDec : 0) : +settings.aPad;
        var truncateZeros = function (ivRounded) { /** truncate not needed zeros */
            var regex = rDec === 0 ? (/(\.[1-9]*)0*$/) : rDec === 1 ? (/(\.\d[1-9]*)0*$/) : new RegExp('(\\.\\d{' + rDec + '}[1-9]*)0*$');
            ivRounded = ivRounded.replace(regex, '$1'); /** If there are no decimal places, we don't need a decimal point at the end */
            if (rDec === 0) {
                ivRounded = ivRounded.replace(/\.$/, '');
            }
            return ivRounded;
        };
        if (iv.charAt(0) === '-') { /** Checks if the iv (input Value)is a negative value */
            nSign = '-'; /** removes the negative sign will be added back later if required */
            iv = iv.replace('-', '');
        } /** prepend a zero if first character is not a digit (then it is likely to be a dot)*/
        if (!iv.match(/^\d/)) {
            iv = '0' + iv;
        } /** determines if the value is zero - if zero no negative sign */
        if (nSign === '-' && +iv === 0) {
            nSign = '';
        }
        if ((+iv > 0 && settings.lZero !== 'keep') || (iv.length > 0 && settings.lZero === 'allow')) { /** trims leading zero's if needed */
            iv = iv.replace(/^0*(\d)/, '$1');
        }
        var dPos = iv.lastIndexOf('.'), /** virtual decimal position */
            vdPos = dPos === -1 ? iv.length - 1 : dPos, /** checks decimal places to determine if rounding is required */
            cDec = (iv.length - 1) - vdPos; /** check if no rounding is required */
        if (cDec <= settings.mDec) {
            ivRounded = iv; /** check if we need to pad with zeros */
            if (cDec < rDec) {
                if (dPos === -1) {
                    ivRounded += '.';
                }
                while (cDec < rDec) {
                    var zeros = '000000'.substring(0, rDec - cDec);
                    ivRounded += zeros;
                    cDec += zeros.length;
                }
            } else if (cDec > rDec) {
                ivRounded = truncateZeros(ivRounded);
            } else if (cDec === 0 && rDec === 0) {
                ivRounded = ivRounded.replace(/\.$/, '');
            }
            return nSign + ivRounded;
        } /** rounded length of the string after rounding */
        var rLength = dPos + settings.mDec, /** test round */
            tRound = +iv.charAt(rLength + 1),
            ivArray = iv.substring(0, rLength + 1).split(''),
            odd = (iv.charAt(rLength) === '.') ? (iv.charAt(rLength - 1) % 2) : (iv.charAt(rLength) % 2);
        if ((tRound > 4 && settings.mRound === 'S') || (tRound > 4 && settings.mRound === 'A' && nSign === '') || (tRound > 5 && settings.mRound === 'A' && nSign === '-') || (tRound > 5 && settings.mRound === 's') || (tRound > 5 && settings.mRound === 'a' && nSign === '') || (tRound > 4 && settings.mRound === 'a' && nSign === '-') || (tRound > 5 && settings.mRound === 'B') || (tRound === 5 && settings.mRound === 'B' && odd === 1) || (tRound > 0 && settings.mRound === 'C' && nSign === '') || (tRound > 0 && settings.mRound === 'F' && nSign === '-') || (tRound > 0 && settings.mRound === 'U')) {
            /** Round up the last digit if required, and continue until no more 9's are found */
            for (i = (ivArray.length - 1); i >= 0; i -= 1) {
                if (ivArray[i] !== '.') {
                    ivArray[i] = +ivArray[i] + 1;
                    if (ivArray[i] < 10) {
                        break;
                    }
                    if (i > 0) {
                        ivArray[i] = '0';
                    }
                }
            }
        } /** Reconstruct the string, converting any 10's to 0's */
        ivArray = ivArray.slice(0, rLength + 1);
        ivRounded = truncateZeros(ivArray.join('')); /** return rounded value */
        return (+ivRounded === 0) ? ivRounded : nSign + ivRounded;
    }
    /**
     * Holder object for field properties
     */
    function AutoNumericHolder(that, settings) {
        this.settings = settings;
        this.that = that;
        this.$that = $(that);
        this.formatted = false;
        this.settingsClone = autoCode(this.$that, this.settings);
        this.value = that.value;
    }
    AutoNumericHolder.prototype = {
        init: function (e) {
            this.value = this.that.value;
            this.settingsClone = autoCode(this.$that, this.settings);
            this.ctrlKey = e.ctrlKey;
            this.cmdKey = e.metaKey;
            this.shiftKey = e.shiftKey;
            this.selection = getElementSelection(this.that); /** keypress event overwrites meaningful value of e.keyCode */
            if (e.type === 'keydown' || e.type === 'keyup') {
                this.kdCode = e.keyCode;
            }
            this.which = e.which;
            this.processed = false;
            this.formatted = false;
        },
        setSelection: function (start, end, setReal) {
            start = Math.max(start, 0);
            end = Math.min(end, this.that.value.length);
            this.selection = {
                start: start,
                end: end,
                length: end - start
            };
            if (setReal === undefined || setReal) {
                setElementSelection(this.that, start, end);
            }
        },
        setPosition: function (pos, setReal) {
            this.setSelection(pos, pos, setReal);
        },
        getBeforeAfter: function () {
            var value = this.value,
                left = value.substring(0, this.selection.start),
                right = value.substring(this.selection.end, value.length);
            return [left, right];
        },
        getBeforeAfterStriped: function () {
            var parts = this.getBeforeAfter();
            parts[0] = autoStrip(parts[0], this.settingsClone);
            parts[1] = autoStrip(parts[1], this.settingsClone);
            return parts;
        },
        /**
         * strip parts from excess characters and leading zeroes
         */
        normalizeParts: function (left, right) {
            var settingsClone = this.settingsClone;
            right = autoStrip(right, settingsClone); /** if right is not empty and first character is not aDec, */
            /** we could strip all zeros, otherwise only leading */
            var strip = right.match(/^\d/) ? true : 'leading';
            left = autoStrip(left, settingsClone, strip); /** prevents multiple leading zeros from being entered */
            if ((left === '' || left === settingsClone.aNeg) && settingsClone.lZero === 'deny') {
                if (right > '') {
                    right = right.replace(/^0*(\d)/, '$1');
                }
            }
            var new_value = left + right; /** insert zero if has leading dot */
            if (settingsClone.aDec) {
                var m = new_value.match(new RegExp('^' + settingsClone.aNegRegAutoStrip + '\\' + settingsClone.aDec));
                if (m) {
                    left = left.replace(m[1], m[1] + '0');
                    new_value = left + right;
                }
            } /** insert zero if number is empty and io.wEmpty == 'zero' */
            if (settingsClone.wEmpty === 'zero' && (new_value === settingsClone.aNeg || new_value === '')) {
                left += '0';
            }
            return [left, right];
        },
        /**
         * set part of number to value keeping position of cursor
         */
        setValueParts: function (left, right) {
            var settingsClone = this.settingsClone,
                parts = this.normalizeParts(left, right),
                new_value = parts.join(''),
                position = parts[0].length;
            if (autoCheck(new_value, settingsClone)) {
                new_value = truncateDecimal(new_value, settingsClone.aDec, settingsClone.mDec);
                if (position > new_value.length) {
                    position = new_value.length;
                }
                this.value = new_value;
                this.setPosition(position, false);
                return true;
            }
            return false;
        },
        /**
         * helper function for expandSelectionOnSign
         * returns sign position of a formatted value
         */
        signPosition: function () {
            var settingsClone = this.settingsClone,
                aSign = settingsClone.aSign,
                that = this.that;
            if (aSign) {
                var aSignLen = aSign.length;
                if (settingsClone.pSign === 'p') {
                    var hasNeg = settingsClone.aNeg && that.value && that.value.charAt(0) === settingsClone.aNeg;
                    return hasNeg ? [1, aSignLen + 1] : [0, aSignLen];
                }
                var valueLen = that.value.length;
                return [valueLen - aSignLen, valueLen];
            }
            return [1000, -1];
        },
        /**
         * expands selection to cover whole sign
         * prevents partial deletion/copying/overwriting of a sign
         */
        expandSelectionOnSign: function (setReal) {
            var sign_position = this.signPosition(),
                selection = this.selection;
            if (selection.start < sign_position[1] && selection.end > sign_position[0]) { /** if selection catches something except sign and catches only space from sign */
                if ((selection.start < sign_position[0] || selection.end > sign_position[1]) && this.value.substring(Math.max(selection.start, sign_position[0]), Math.min(selection.end, sign_position[1])).match(/^\s*$/)) { /** then select without empty space */
                    if (selection.start < sign_position[0]) {
                        this.setSelection(selection.start, sign_position[0], setReal);
                    } else {
                        this.setSelection(sign_position[1], selection.end, setReal);
                    }
                } else { /** else select with whole sign */
                    this.setSelection(Math.min(selection.start, sign_position[0]), Math.max(selection.end, sign_position[1]), setReal);
                }
            }
        },
        /**
         * try to strip pasted value to digits
         */
        checkPaste: function () {
            if (this.valuePartsBeforePaste !== undefined) {
                var parts = this.getBeforeAfter(),
                    oldParts = this.valuePartsBeforePaste;
                delete this.valuePartsBeforePaste; /** try to strip pasted value first */
                parts[0] = parts[0].substr(0, oldParts[0].length) + autoStrip(parts[0].substr(oldParts[0].length), this.settingsClone);
                if (!this.setValueParts(parts[0], parts[1])) {
                    this.value = oldParts.join('');
                    this.setPosition(oldParts[0].length, false);
                }
            }
        },
        /**
         * process pasting, cursor moving and skipping of not interesting keys
         * if returns true, futher processing is not performed
         */
        skipAllways: function (e) {
            var kdCode = this.kdCode,
                which = this.which,
                ctrlKey = this.ctrlKey,
                cmdKey = this.cmdKey,
                shiftKey = this.shiftKey; /** catch the ctrl up on ctrl-v */
            if (((ctrlKey || cmdKey) && e.type === 'keyup' && this.valuePartsBeforePaste !== undefined) || (shiftKey && kdCode === 45)) {
                this.checkPaste();
                return false;
            }
            /** codes are taken from http://www.cambiaresearch.com/c4/702b8cd1-e5b0-42e6-83ac-25f0306e3e25/Javascript-Char-Codes-Key-Codes.aspx
             * skip Fx keys, windows keys, other special keys
             */
            if ((kdCode >= 112 && kdCode <= 123) || (kdCode >= 91 && kdCode <= 93) || (kdCode >= 9 && kdCode <= 31) || (kdCode < 8 && (which === 0 || which === kdCode)) || kdCode === 144 || kdCode === 145 || kdCode === 45) {
                return true;
            }
            if ((ctrlKey || cmdKey) && kdCode === 65) { /** if select all (a=65)*/
                return true;
            }
            if ((ctrlKey || cmdKey) && (kdCode === 67 || kdCode === 86 || kdCode === 88)) { /** if copy (c=67) paste (v=86) or cut (x=88) */
                if (e.type === 'keydown') {
                    this.expandSelectionOnSign();
                }
                if (kdCode === 86 || kdCode === 45) { /** try to prevent wrong paste */
                    if (e.type === 'keydown' || e.type === 'keypress') {
                        if (this.valuePartsBeforePaste === undefined) {
                            this.valuePartsBeforePaste = this.getBeforeAfter();
                        }
                    } else {
                        this.checkPaste();
                    }
                }
                return e.type === 'keydown' || e.type === 'keypress' || kdCode === 67;
            }
            if (ctrlKey || cmdKey) {
                return true;
            }
            if (kdCode === 37 || kdCode === 39) { /** jump over thousand separator */
                var aSep = this.settingsClone.aSep,
                    start = this.selection.start,
                    value = this.that.value;
                if (e.type === 'keydown' && aSep && !this.shiftKey) {
                    if (kdCode === 37 && value.charAt(start - 2) === aSep) {
                        this.setPosition(start - 1);
                    } else if (kdCode === 39 && value.charAt(start + 1) === aSep) {
                        this.setPosition(start + 1);
                    }
                }
                return true;
            }
            if (kdCode >= 34 && kdCode <= 40) {
                return true;
            }
            return false;
        },
        /**
         * process deletion of characters
         * returns true if processing performed
         */
        processAllways: function () {
            var parts; /** process backspace or delete */
            if (this.kdCode === 8 || this.kdCode === 46) {
                if (!this.selection.length) {
                    parts = this.getBeforeAfterStriped();
                    if (this.kdCode === 8) {
                        parts[0] = parts[0].substring(0, parts[0].length - 1);
                    } else {
                        parts[1] = parts[1].substring(1, parts[1].length);
                    }
                    this.setValueParts(parts[0], parts[1]);
                } else {
                    this.expandSelectionOnSign(false);
                    parts = this.getBeforeAfterStriped();
                    this.setValueParts(parts[0], parts[1]);
                }
                return true;
            }
            return false;
        },
        /**
         * process insertion of characters
         * returns true if processing performed
         */
        processKeypress: function () {
            var settingsClone = this.settingsClone,
                cCode = String.fromCharCode(this.which),
                parts = this.getBeforeAfterStriped(),
                left = parts[0],
                right = parts[1]; /** start rules when the decimal character key is pressed */
            /** always use numeric pad dot to insert decimal separator */
            if (cCode === settingsClone.aDec || (settingsClone.altDec && cCode === settingsClone.altDec) || ((cCode === '.' || cCode === ',') && this.kdCode === 110)) { /** do not allow decimal character if no decimal part allowed */
                if (!settingsClone.mDec || !settingsClone.aDec) {
                    return true;
                } /** do not allow decimal character before aNeg character */
                if (settingsClone.aNeg && right.indexOf(settingsClone.aNeg) > -1) {
                    return true;
                } /** do not allow decimal character if other decimal character present */
                if (left.indexOf(settingsClone.aDec) > -1) {
                    return true;
                }
                if (right.indexOf(settingsClone.aDec) > 0) {
                    return true;
                }
                if (right.indexOf(settingsClone.aDec) === 0) {
                    right = right.substr(1);
                }
                this.setValueParts(left + settingsClone.aDec, right);
                return true;
            } /** start rule on negative sign */

            if (cCode === '-' || cCode === '+') { /** prevent minus if not allowed */
                if (!settingsClone.aNeg) {
                    return true;
                } /** caret is always after minus */
                if (left === '' && right.indexOf(settingsClone.aNeg) > -1) {
                    left = settingsClone.aNeg;
                    right = right.substring(1, right.length);
                } /** change sign of number, remove part if should */
                if (left.charAt(0) === settingsClone.aNeg) {
                    left = left.substring(1, left.length);
                } else {
                    left = (cCode === '-') ? settingsClone.aNeg + left : left;
                }
                this.setValueParts(left, right);
                return true;
            } /** digits */
            if (cCode >= '0' && cCode <= '9') { /** if try to insert digit before minus */
                if (settingsClone.aNeg && left === '' && right.indexOf(settingsClone.aNeg) > -1) {
                    left = settingsClone.aNeg;
                    right = right.substring(1, right.length);
                }
                if (settingsClone.vMax <= 0 && settingsClone.vMin < settingsClone.vMax && this.value.indexOf(settingsClone.aNeg) === -1 && cCode !== '0') {
                    left = settingsClone.aNeg + left;
                }
                this.setValueParts(left + cCode, right);
                return true;
            } /** prevent any other character */
            return true;
        },
        /**
         * formatting of just processed value with keeping of cursor position
         */
        formatQuick: function () {
            var settingsClone = this.settingsClone,
                parts = this.getBeforeAfterStriped(),
                leftLength = this.value;
            if ((settingsClone.aSep === '' || (settingsClone.aSep !== '' && leftLength.indexOf(settingsClone.aSep) === -1)) && (settingsClone.aSign === '' || (settingsClone.aSign !== '' && leftLength.indexOf(settingsClone.aSign) === -1))) {
                var subParts = [],
                    nSign = '';
                subParts = leftLength.split(settingsClone.aDec);
                if (subParts[0].indexOf('-') > -1) {
                    nSign = '-';
                    subParts[0] = subParts[0].replace('-', '');
                    parts[0] = parts[0].replace('-', '');
                }
                if (subParts[0].length > settingsClone.mInt && parts[0].charAt(0) === '0') { /** strip leading zero if need */
                    parts[0] = parts[0].slice(1);
                }
                parts[0] = nSign + parts[0];
            }
            var value = autoGroup(this.value, this.settingsClone),
                position = value.length;
            if (value) {
                /** prepare regexp which searches for cursor position from unformatted left part */
                var left_ar = parts[0].split(''),
                    i = 0;
                for (i; i < left_ar.length; i += 1) { /** thanks Peter Kovari */
                    if (!left_ar[i].match('\\d')) {
                        left_ar[i] = '\\' + left_ar[i];
                    }
                }
                var leftReg = new RegExp('^.*?' + left_ar.join('.*?'));
                /** search cursor position in formatted value */
                var newLeft = value.match(leftReg);
                if (newLeft) {
                    position = newLeft[0].length;
                    /** if we are just before sign which is in prefix position */
                    if (((position === 0 && value.charAt(0) !== settingsClone.aNeg) || (position === 1 && value.charAt(0) === settingsClone.aNeg)) && settingsClone.aSign && settingsClone.pSign === 'p') {
                        /** place carret after prefix sign */
                        position = this.settingsClone.aSign.length + (value.charAt(0) === '-' ? 1 : 0);
                    }
                } else if (settingsClone.aSign && settingsClone.pSign === 's') {
                    /** if we could not find a place for cursor and have a sign as a suffix */
                    /** place carret before suffix currency sign */
                    position -= settingsClone.aSign.length;
                }
            }
            this.that.value = value;
            this.setPosition(position);
            this.formatted = true;
        }
    };
    /** thanks to Anthony & Evan C */
    function autoGet(obj) {
        if (typeof obj === 'string') {
            obj = obj.replace(/\[/g, "\\[").replace(/\]/g, "\\]");
            obj = '#' + obj.replace(/(:|\.)/g, '\\$1');
            /** obj = '#' + obj.replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, '\\$1'); */
            /** possible modification to replace the above 2 lines */
        }
        return $(obj);
    }

    function getHolder($that, settings, update) {
        var data = $that.data('autoNumeric');
        if (!data) {
            data = {};
            $that.data('autoNumeric', data);
        }
        var holder = data.holder;
        if ((holder === undefined && settings) || update) {
            holder = new AutoNumericHolder($that.get(0), settings);
            data.holder = holder;
        }
        return holder;
    }
    var methods = {
        init: function (options) {
            return this.each(function () {
                var $this = $(this),
                    settings = $this.data('autoNumeric'), /** attempt to grab 'autoNumeric' settings, if they don't exist returns "undefined". */
                    tagData = $this.data(); /** attempt to grab HTML5 data, if they don't exist we'll get "undefined".*/
                if (typeof settings !== 'object') { /** If we couldn't grab settings, create them from defaults and passed options. */
                    var defaults = {
                        /** allowed numeric values
                         * please do not modify
                         */
                        aNum: '0123456789',
                        /** allowed thousand separator characters
                         * comma = ','
                         * period "full stop" = '.'
                         * apostrophe is escaped = '\''
                         * space = ' '
                         * none = ''
                         * NOTE: do not use numeric characters
                         */
                        aSep: ',',
                        /** digital grouping for the thousand separator used in Format
                         * dGroup: '2', results in 99,99,99,999 common in India for values less than 1 billion and greater than -1 billion
                         * dGroup: '3', results in 999,999,999 default
                         * dGroup: '4', results in 9999,9999,9999 used in some Asian countries
                         */
                        dGroup: '3',
                        /** allowed decimal separator characters
                         * period "full stop" = '.'
                         * comma = ','
                         */
                        aDec: '.',
                        /** allow to declare alternative decimal separator which is automatically replaced by aDec
                         * developed for countries the use a comma ',' as the decimal character
                         * and have keyboards\numeric pads that have a period 'full stop' as the decimal characters (Spain is an example)
                         */
                        altDec: null,
                        /** allowed currency symbol
                         * Must be in quotes aSign: '$', a space is allowed aSign: '$ '
                         */
                        aSign: '',
                        /** placement of currency sign
                         * for prefix pSign: 'p',
                         * for suffix pSign: 's',
                         */
                        pSign: 'p',
                        /** maximum possible value
                         * value must be enclosed in quotes and use the period for the decimal point
                         * value must be larger than vMin
                         */
                        vMax: '999999999.99',
                        /** minimum possible value
                         * value must be enclosed in quotes and use the period for the decimal point
                         * value must be smaller than vMax
                         */
                        vMin: '0.00',
                        /** max number of decimal places = used to override decimal places set by the vMin & vMax values
                         * value must be enclosed in quotes example mDec: '3',
                         * This can also set the value via a call back function mDec: 'css:#
                         */
                        mDec: null,
                        /** method used for rounding
                         * mRound: 'S', Round-Half-Up Symmetric (default)
                         * mRound: 'A', Round-Half-Up Asymmetric
                         * mRound: 's', Round-Half-Down Symmetric (lower case s)
                         * mRound: 'a', Round-Half-Down Asymmetric (lower case a)
                         * mRound: 'B', Round-Half-Even "Bankers Rounding"
                         * mRound: 'U', Round Up "Round-Away-From-Zero"
                         * mRound: 'D', Round Down "Round-Toward-Zero" - same as truncate
                         * mRound: 'C', Round to Ceiling "Toward Positive Infinity"
                         * mRound: 'F', Round to Floor "Toward Negative Infinity"
                         */
                        mRound: 'S',
                        /** controls decimal padding
                         * aPad: true - always Pad decimals with zeros
                         * aPad: false - does not pad with zeros.
                         * aPad: `some number` - pad decimals with zero to number different from mDec
                         * thanks to Jonas Johansson for the suggestion
                         */
                        aPad: true,
                        /** places brackets on negative value -$ 999.99 to (999.99)
                         * visible only when the field does NOT have focus the left and right symbols should be enclosed in quotes and seperated by a comma
                         * nBracket: null, nBracket: '(,)', nBracket: '[,]', nBracket: '<,>' or nBracket: '{,}'
                         */
                        nBracket: null,
                        /** Displayed on empty string
                         * wEmpty: 'empty', - input can be blank
                         * wEmpty: 'zero', - displays zero
                         * wEmpty: 'sign', - displays the currency sign
                         */
                        wEmpty: 'empty',
                        /** controls leading zero behavior
                         * lZero: 'allow', - allows leading zeros to be entered. Zeros will be truncated when entering additional digits. On focusout zeros will be deleted.
                         * lZero: 'deny', - allows only one leading zero on values less than one
                         * lZero: 'keep', - allows leading zeros to be entered. on fousout zeros will be retained.
                         */
                        lZero: 'allow',
                        /** determine if the default value will be formatted on page ready.
                         * true = automatically formats the default value on page ready
                         * false = will not format the default value
                         */
                        aForm: true,
                        /** future use */
                        onSomeEvent: function () {}
                    };
                    settings = $.extend({}, defaults, tagData, options); /** Merge defaults, tagData and options */
                    if (settings.aDec === settings.aSep) {
                        $.error("autoNumeric will not function properly when the decimal character aDec: '" + settings.aDec + "' and thousand separator aSep: '" + settings.aSep + "' are the same character");
                        return this;
                    }
                    $this.data('autoNumeric', settings); /** Save our new settings */
                } else {
                    return this;
                }
                settings.lastSetValue = '';
                settings.runOnce = false;
                var holder = getHolder($this, settings);
                if ($.inArray($this.prop('tagName'), settings.tagList) === -1 && $this.prop('tagName') !== 'INPUT') {
                    $.error("The <" + $this.prop('tagName') + "> is not supported by autoNumeric()");
                    return this;
                }
                if (settings.runOnce === false && settings.aForm) {/** routine to format default value on page load */
                    if ($this.is('input[type=text], input[type=hidden], input:not([type])')) {
                        var setValue = true;
                        if ($this[0].value === '' && settings.wEmpty === 'empty') {
                            $this[0].value = '';
                            setValue = false;
                        }
                        if ($this[0].value === '' && settings.wEmpty === 'sign') {
                            $this[0].value = settings.aSign;
                            setValue = false;
                        }
                        if (setValue) {
                            $this.autoNumeric('set', $this.val());
                        }
                    }
                    if ($.inArray($this.prop('tagName'), settings.tagList) !== -1 && $this.text() !== '') {
                        $this.autoNumeric('set', $this.text());
                    }
                }
                settings.runOnce = true;
                if ($this.is('input[type=text], input[type=hidden], input:not([type])')) { /**added hidden type */
                    $this.on('keydown.autoNumeric', function (e) {
                        holder = getHolder($this);
                        if (holder.settings.aDec === holder.settings.aSep) {
                            $.error("autoNumeric will not function properly when the decimal character aDec: '" + holder.settings.aDec + "' and thousand separator aSep: '" + holder.settings.aSep + "' are the same character");
                            return this;
                        }
                        if (holder.that.readOnly) {
                            holder.processed = true;
                            return true;
                        }
                        /** The below streamed code / comment allows the "enter" keydown to throw a change() event */
                        /** if (e.keyCode === 13 && holder.inVal !== $this.val()){
                            $this.change();
                            holder.inVal = $this.val();
                        }*/
                        holder.init(e);
                        holder.settings.oEvent = 'keydown';
                        if (holder.skipAllways(e)) {
                            holder.processed = true;
                            return true;
                        }
                        if (holder.processAllways()) {
                            holder.processed = true;
                            holder.formatQuick();
                            e.preventDefault();
                            return false;
                        }
                        holder.formatted = false;
                        return true;
                    });
                    $this.on('keypress.autoNumeric', function (e) {
                        var holder = getHolder($this),
                            processed = holder.processed;
                        holder.init(e);
                        holder.settings.oEvent = 'keypress';
                        if (holder.skipAllways(e)) {
                            return true;
                        }
                        if (processed) {
                            e.preventDefault();
                            return false;
                        }
                        if (holder.processAllways() || holder.processKeypress()) {
                            holder.formatQuick();
                            e.preventDefault();
                            return false;
                        }
                        holder.formatted = false;
                    });
                    $this.on('keyup.autoNumeric', function (e) {
                        var holder = getHolder($this);
                        holder.init(e);
                        holder.settings.oEvent = 'keyup';
                        var skip = holder.skipAllways(e);
                        holder.kdCode = 0;
                        delete holder.valuePartsBeforePaste;
                        if ($this[0].value === holder.settings.aSign) { /** added to properly place the caret when only the currency is present */
                            if (holder.settings.pSign === 's') {
                                setElementSelection(this, 0, 0);
                            } else {
                                setElementSelection(this, holder.settings.aSign.length, holder.settings.aSign.length);
                            }
                        }
                        if (skip) {
                            return true;
                        }
                        if (this.value === '') {
                            return true;
                        }
                        if (!holder.formatted) {
                            holder.formatQuick();
                        }
                    });
                    $this.on('focusin.autoNumeric', function () {
                        var holder = getHolder($this);
                        holder.settingsClone.oEvent = 'focusin';
                        if (holder.settingsClone.nBracket !== null) {
                            var checkVal = $this.val();
                            $this.val(negativeBracket(checkVal, holder.settingsClone.nBracket, holder.settingsClone.oEvent));
                        }
                        holder.inVal = $this.val();
                        var onempty = checkEmpty(holder.inVal, holder.settingsClone, true);
                        if (onempty !== null) {
                            $this.val(onempty);
                            if (holder.settings.pSign === 's') {
                                setElementSelection(this, 0, 0);
                            } else {
                                setElementSelection(this, holder.settings.aSign.length, holder.settings.aSign.length);
                            }
                        }
                    });
                    $this.on('focusout.autoNumeric', function () {
                        var holder = getHolder($this),
                            settingsClone = holder.settingsClone,
                            value = $this.val(),
                            origValue = value;
                        holder.settingsClone.oEvent = 'focusout';
                        var strip_zero = ''; /** added to control leading zero */
                        if (settingsClone.lZero === 'allow') { /** added to control leading zero */
                            settingsClone.allowLeading = false;
                            strip_zero = 'leading';
                        }
                        if (value !== '') {
                            value = autoStrip(value, settingsClone, strip_zero);
                            if (checkEmpty(value, settingsClone) === null && autoCheck(value, settingsClone, $this[0])) {
                                value = fixNumber(value, settingsClone.aDec, settingsClone.aNeg);
                                value = autoRound(value, settingsClone);
                                value = presentNumber(value, settingsClone.aDec, settingsClone.aNeg);
                            } else {
                                value = '';
                            }
                        }
                        var groupedValue = checkEmpty(value, settingsClone, false);
                        if (groupedValue === null) {
                            groupedValue = autoGroup(value, settingsClone);
                        }
                        if (groupedValue !== origValue) {
                            $this.val(groupedValue);
                        }
                        if (groupedValue !== holder.inVal) {
                            $this.change();
                            delete holder.inVal;
                        }
                        if (settingsClone.nBracket !== null && $this.autoNumeric('get') < 0) {
                            holder.settingsClone.oEvent = 'focusout';
                            $this.val(negativeBracket($this.val(), settingsClone.nBracket, settingsClone.oEvent));
                        }
                    });
                }
            });
        },
        /** method to remove settings and stop autoNumeric() */
        destroy: function () {
            return $(this).each(function () {
                var $this = $(this);
                $this.off('.autoNumeric');
                $this.removeData('autoNumeric');
            });
        },
        /** method to update settings - can call as many times */
        update: function (options) {
            return $(this).each(function () {
                var $this = autoGet($(this)),
                    settings = $this.data('autoNumeric');
                if (typeof settings !== 'object') {
                    $.error("You must initialize autoNumeric('init', {options}) prior to calling the 'update' method");
                    return this;
                }
                var strip = $this.autoNumeric('get');
                settings = $.extend(settings, options);
                getHolder($this, settings, true);
                if (settings.aDec === settings.aSep) {
                    $.error("autoNumeric will not function properly when the decimal character aDec: '" + settings.aDec + "' and thousand separator aSep: '" + settings.aSep + "' are the same character");
                    return this;
                }
                $this.data('autoNumeric', settings);
                if ($this.val() !== '' || $this.text() !== '') {
                    return $this.autoNumeric('set', strip);
                }
                return;
            });
        },
        /** returns a formatted strings for "input:text" fields Uses jQuery's .val() method*/
        set: function (valueIn) {
            return $(this).each(function () {
                var $this = autoGet($(this)),
                    settings = $this.data('autoNumeric'),
                    value = valueIn.toString(),
                    testValue = valueIn.toString();
                if (typeof settings !== 'object') {
                    $.error("You must initialize autoNumeric('init', {options}) prior to calling the 'set' method");
                    return this;
                }
               /** allows locale decimal separator to be a comma */
                if ((testValue === $this.attr('value') || testValue === $this.text()) && settings.runOnce === false) {
                    value = value.replace(',', '.');
                }
                /** routine to handle page re-load from back button */
                if (testValue !== $this.attr('value') && $this.prop('tagName') === 'INPUT' && settings.runOnce === false) {
                    value = autoStrip(value, settings);
                }
                /** returns a empty string if the value being 'set' contains non-numeric characters and or more than decimal point (full stop) and will not be formatted */
                if (!$.isNumeric(+value)) {
                    return '';
                }
                value = checkValue(value, settings);
                settings.oEvent = 'set';
                settings.lastSetValue = value; /** saves the unrounded value from the set method - $('selector').data('autoNumeric').lastSetValue; - helpful when you need to change the rounding accuracy*/
                value.toString();
                if (value !== '') {
                    value = autoRound(value, settings);
                }
                value = presentNumber(value, settings.aDec, settings.aNeg);
                if (!autoCheck(value, settings)) {
                    value = autoRound('', settings);
                }
                value = autoGroup(value, settings);
                if ($this.is('input[type=text], input[type=hidden], input:not([type])')) { /**added hidden type */
                    return $this.val(value);
                }
                if ($.inArray($this.prop('tagName'), settings.tagList) !== -1) {
                    return $this.text(value);
                }
                $.error("The <" + $this.prop('tagName') + "> is not supported by autoNumeric()");
                return false;
            });
        },
        /** method to get the unformatted value from a specific input field, returns a numeric value */
        get: function () {
            var $this = autoGet($(this)),
                settings = $this.data('autoNumeric');
            if (typeof settings !== 'object') {
                $.error("You must initialize autoNumeric('init', {options}) prior to calling the 'get' method");
                return this;
            }
            settings.oEvent = 'get';
            var getValue = '';
            /** determine the element type then use .eq(0) selector to grab the value of the first element in selector */
            if ($this.is('input[type=text], input[type=hidden], input:not([type])')) { /**added hidden type */
                getValue = $this.eq(0).val();
            } else if ($.inArray($this.prop('tagName'), settings.tagList) !== -1) {
                getValue = $this.eq(0).text();
            } else {
                $.error("The <" + $this.prop('tagName') + "> is not supported by autoNumeric()");
                return false;
            }
            if ((getValue === '' && settings.wEmpty === 'empty') || (getValue === settings.aSign && (settings.wEmpty === 'sign' || settings.wEmpty === 'empty'))) {
                return '';
            }
            if (settings.nBracket !== null && getValue !== '') {
                getValue = negativeBracket(getValue, settings.nBracket, settings.oEvent);
            }
            if (settings.runOnce || settings.aForm === false) {
                getValue = autoStrip(getValue, settings);
            }
            getValue = fixNumber(getValue, settings.aDec, settings.aNeg);
            if (+getValue === 0 && settings.lZero !== 'keep') {
                getValue = '0';
            }
            if (settings.lZero === 'keep') {
                return getValue;
            }
            getValue = checkValue(getValue, settings);
            return getValue; /** returned Numeric String */
        },
        /** method to get the unformatted value from multiple fields */
        getString: function () {
            var isAutoNumeric = false,
                $this = autoGet($(this)),
                str = $this.serialize(),
                parts = str.split('&'),
                i = 0;
            for (i; i < parts.length; i += 1) {
                var miniParts = parts[i].split('=');
                var settings = $('*[name="' + decodeURIComponent(miniParts[0]) + '"]').data('autoNumeric');
                if (typeof settings === 'object') {
                    if (miniParts[1] !== null && $('*[name="' + decodeURIComponent(miniParts[0]) + '"]').data('autoNumeric') !== undefined) {
                        miniParts[1] = $('input[name="' + decodeURIComponent(miniParts[0]) + '"]').autoNumeric('get');
                        parts[i] = miniParts.join('=');
                        isAutoNumeric = true;
                    }
                }
            }
            if (isAutoNumeric === true) {
                return parts.join('&');
            }
            $.error("You must initialize autoNumeric('init', {options}) prior to calling the 'getString' method");
            return this;
        },
        /** method to get the unformatted value from multiple fields */
        getArray: function () {
            var isAutoNumeric = false,
                $this = autoGet($(this)),
                formFields = $this.serializeArray();
            $.each(formFields, function (i, field) {
                var settings = $('*[name="' + decodeURIComponent(field.name) + '"]').data('autoNumeric');
                if (typeof settings === 'object') {
                    if (field.value !== '' && $('*[name="' + decodeURIComponent(field.name) + '"]').data('autoNumeric') !== undefined) {
                        field.value = $('input[name="' + decodeURIComponent(field.name) + '"]').autoNumeric('get').toString();
                    }
                    isAutoNumeric = true;
                }
            });
            if (isAutoNumeric === true) {
                return formFields;
            }
            $.error("You must initialize autoNumeric('init', {options}) prior to calling the 'getArray' method");
            return this;
        },
        /** returns the settings object for those who need to look under the hood */
        getSettings: function () {
            var $this = autoGet($(this));
            return $this.eq(0).data('autoNumeric');
        }
    };
    $.fn.autoNumeric = function (method) {
        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        }
        if (typeof method === 'object' || !method) {
            return methods.init.apply(this, arguments);
        }
        $.error('Method "' + method + '" is not supported by autoNumeric()');
    };
}(jQuery));;
(function ($) {   
   'use strict';
   $(document).on('change','.sortRates',function(e){
	 var key_val = $(this).val();
     var rates = JSON.parse($("#rates_data").val());
	 switch(key_val) {
		case 'LMP':
					rates.sort(function(a, b) {
						return parseFloat(a.MonthlyPayment) - parseFloat(b.MonthlyPayment);
					});
					break;
		case 'LR':
					rates.sort(function(a, b) {
						return parseFloat(a.Rate) - parseFloat(b.Rate);
					});
					break;
		case 'LF':
					rates.sort(function(a, b) {
						return parseFloat(a.TotalFees) - parseFloat(b.TotalFees);
					});
					break;
	 }
	 $('[data-toggle="tooltip"]').tooltip();	
	 $.post("/quick_rate_sort",{  "rates": rates,'type_sort': key_val},function(data) {
			$('#quick_rate_result').html(data);
			jQuery('.qrq_accordion').each(function () {
						var accordian = jQuery(this);
						accordian.find('.accordion-head').on('click', function () {
							jQuery(this).parent().find(".accordion-head").removeClass('open close1');
							jQuery(this).removeClass('open').addClass('close1');
							accordian.find('.accordion-body').slideUp();
							if (!jQuery(this).next().is(':visible')) {
								jQuery(this).removeClass('close1').addClass('open');
								jQuery(this).next().slideDown();
							}
						});
			jQuery('[data-toggle="tooltip"]').tooltip();
		});
	 });
   });

			 $.validator.addMethod('qrq_lessThan', function(value, element, param) {
				var i = parseInt(value);
				var j = parseInt($(param).val());
				return i < j;
			}, "Less Than");
			$.validator.addMethod('qrq_greaterThan', function(value, element) {
				var i = parseInt(value);
				return i > 0;
			}, "Greater Than");
			
			$.validator.addMethod('checkZipCode', function (value, element){
                  
			  var ip = location.host;
			  if(ip == "serenity.fgmcportals.com") {
				var zip_url = "http://r2d2.fgmcportals.com:5100/api/v1/state/";
			  } else {
				var zip_url = "http://fgmc.common.local:5100/api/v1/state/";
			  }
              
              var return_val = false;
			  if(value.length == 5) {
				  $.ajax({
					  url: zip_url+value,
					  type: 'GET',
					  dataType:"json",                  
					  async: false,
					  success : function(response) {
                                                           $('#tpl_zipcode_hidden').val(JSON.stringify(response));     
                                                           if(response.length > 0){
								  return_val = false;
							   }
							   else{
								   return_val = true;
							   }
							}
					  });
				}
                  return return_val;
            });
			$.validator.addMethod('checkZipCodeService', function (value, element){
                  
              var ip = location.host;
			  if(ip == "serenity.fgmcportals.com") {
				var zip_url = "http://r2d2.fgmcportals.com:5100/api/v1/state/";
			  } else {
				var zip_url = "http://fgmc.common.local:5100/api/v1/state/";
			  }
              var return_val = false;
			  if(value.length == 5) {
				  $.ajax({
					  url: zip_url+value+'/serviced',
					  type: 'GET',
					  dataType:"json",                  
					  async: false,
					  success : function(response) {
							   if(response){
								  return_val = true;
							   }
							   else{
								   return_val = false;
							   }
							}
					  });
				}
                  return return_val;
            });
			jQuery.validator.addMethod("phoneUS", function(phone_number, element) {
				phone_number = phone_number.replace(/\s+/g, "");
				return this.optional(element) || phone_number.length > 9 && 
				phone_number.match(/^(\+?1-?)?(\([2-9]\d{2}\)|[2-9]\d{2})-?[2-9]\d{2}-?\d{4}$/);
			}, "Please enter a valid phone number.");
			
			$.validator.addMethod(
				'email',function(value, element){
							return this.optional(element) || /(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*")@((?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)$)|\[(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\]$/i.test(value);
				},
				'Please enter a valid email address.'
			);
			var type_form = $("#type_form").val();
			if(type_form == 'home') var err_req = true; else err_req = false;
			
	            $('#quick_rate_form').validate({
	               errorElement: "div",
	               errorClass: "error",
				   onfocusout: function(e) {
						this.element(e);
					},
				   ignore: [],
	               rules: {	                  
	                   "qrq_purchase_price": {required : true,number:true,qrq_greaterThan:true},
	                   "qrq_down_payment": {required : true,number:true,qrq_greaterThan:true,
							qrq_lessThan: '#qrq_purchase_price'},
	                   "qrq_zipcode": {
	                       required: true,number:true,qrq_greaterThan:true,
						   checkZipCode:true,
						   checkZipCodeService:true,
	                       minlength:5						   
	                   },
					   "qrq_credit_score": {required: true},
					   "qrq_loan_product_hidden": {required: true},
					   "qrq_customer_name": {required: err_req},
	                   "qrq_customer_phone": {required: err_req,phoneUS:true},
					   "qrq_customer_email": {required: err_req,email:true}
	
	               },
	               messages: {
					   "qrq_purchase_price": {required : "Please enter the purchase price of the property you would like to purchase.",qrq_greaterThan:"Amount should be greater than zero."},
	                   "qrq_down_payment": {required : "Please enter the down payment amount.",qrq_greaterThan:"Amount should be greater than zero.",
							qrq_lessThan: "The down payment amount cannot be equal to or more than the purchase price."},
	                   "qrq_zipcode": {
	                       required: "Please enter zip code",qrq_greaterThan:"Zipcode should be greater than zero.",
						   checkZipCode:"Please enter a valid zipcode.",
						   checkZipCodeService:"Sorry! We are not currently licensed in this state. Please check back with us. We hope to be there soon.",
	                       minimum:"Please enter a valid zip code."
	                   },
					   "qrq_credit_score": {required: "Please select your credit score range."},
					   "qrq_loan_product_hidden": {required: "Please select your loan product."},
					   "qrq_customer_name": {required: "Please enter your name."},
	                   "qrq_customer_phone": {required: "Please enter your phone."},
					   "qrq_customer_email": {required: "Please enter your email.",email:"Please enter a valid email address."} 
	               },
	               submitHandler: function(form) {  
                           if ($(form).valid()) 
                               form.submit(); 
                           return false; // prevent normal form posting
                    }
	           });
			   	 $('#quick_rate_ref_form').validate({
	               errorElement: "div",
	               errorClass: "error",
				   ignore: [],
				   onfocusout: function(e) {
						this.element(e);
					},
	               rules: {	                  
	                   "qrq_home_value": {required : true,number:true,qrq_greaterThan:true},
	                   "qrq_current_balance": {required : true,number:true,qrq_greaterThan:true,
							qrq_lessThan: '#qrq_home_value'},
	                   "qrq_zipcode": {
	                       required: true,number:true,qrq_greaterThan:true,
						   checkZipCode:true,
						   checkZipCodeService:true,
	                       minlength:5	                      
	                   },
					   "qrq_credit_score": {required: true},
					   "qrq_loan_product_hidden": {required: true},
					   "qrq_customer_name": {required: err_req},
	                   "qrq_customer_phone": {required: err_req,phoneUS:true},
					   "qrq_customer_email": {required: err_req,email:true},
					   "qrq_cash_out" : {qrq_greaterThan:true}
	
	               },
	               messages: {
					   "qrq_home_value": {required : "Please enter the estimated property value.",qrq_greaterThan:"Amount should be greater than zero."},
	                   "qrq_current_balance": {required : "Please enter your current mortgage balance.",qrq_greaterThan:"Amount should be greater than zero.",
							qrq_lessThan: "Current balance must be less than Home Value."},
	                   "qrq_zipcode": {
	                       required: "Please enter a valid zip code.",qrq_greaterThan:"Zip code should be greater than zero.",
						   checkZipCode:"Please enter a valid zip code.",
						   checkZipCodeService:"Sorry! We are not currently licensed in this state. Please check back with us. We hope to be there soon.",
	                       minimum:"Please enter a valid zip code."	                      
	                   },
					   "qrq_credit_score": {required: "Please select your credit score range."},
					   "qrq_loan_product_hidden": {required: "Please select your loan product."},
					   "qrq_customer_name": {required: "Please enter your name."},
	                   "qrq_customer_phone": {required: "Please enter your phone."},
					   "qrq_customer_email": {required: "Please enter your email.",email:"Please enter a valid email address."},
					   "qrq_cash_out" : {qrq_greaterThan:"Amount should be greater than zero."}
	               },
	              submitHandler: function(form) {  
                           if ($(form).valid()) 
                               form.submit(); 
                           return false; // prevent normal form posting
                    } 
	           });

			   $("#qrq_customer_phone").mask("(999) 99?9-9999",{placeholder:" "});
				/*
				$("#qrq_customer_phone").on("blur", function() {
					var last = $(this).val().substr( $(this).val().indexOf("-") + 1 );
					
					if( last.length == 3 ) {
						var move = $(this).val().substr( $(this).val().indexOf("-") - 1, 1 );
						var lastfour = move + last;
						
						var first = $(this).val().substr( 0, 9 );
						
						$(this).val( first + '-' + lastfour );
					}
				});*/
				$("#qrq_customer_phone_ref").mask("(999) 99?9-9999",{placeholder:" "});

				/*
				$("#qrq_customer_phone_ref").on("blur", function() {
					var last = $(this).val().substr( $(this).val().indexOf("-") + 1 );
					
					if( last.length == 3 ) {
						var move = $(this).val().substr( $(this).val().indexOf("-") - 1, 1 );
						var lastfour = move + last;
						
						var first = $(this).val().substr( 0, 9 );
						
						$(this).val( first + '-' + lastfour );
					}
				});	*/
				$('#quick_rate_form .select_loan_products').multiselect({
					nonSelectedText:"Loan Product",
					includeSelectAllOption: true,
					selectAllText: 'Unsure',
					onChange: function(option, checked, select) {
						var data=[];
						var $el=$('#quick_rate_form .select_loan_products');
						$el.find('option:selected').each(function(){
							data.push($(this).val());
						});
						
						if(data.length > 0) {
							$('#quick_rate_form #qrq_loan_product_hidden-error').hide();
							$('#quick_rate_form input[name="qrq_loan_product_hidden"]').val('1');	
							$('#quick_rate_form .multiSelect .btn-group .btn-default').removeClass('error');
						} else {
							$('#quick_rate_form #qrq_loan_product_hidden-error').html("Please select your loan product.").show();
							$('#quick_rate_form input[name="qrq_loan_product_hidden"]').val('');
							$('#quick_rate_form .multiSelect .btn-group .btn-default').addClass('error');
							$('#quick_rate_form input[name="qrq_loan_product_hidden"]').valid();
						}
					},
					onSelectAll: function() {
						var data=[];
						var $el=$('#quick_rate_form .select_loan_products');
						$el.find('option:selected').each(function(){
							data.push($(this).val());
						});
						if(data.length > 0) {
							$('#quick_rate_form #qrq_loan_product_hidden-error').hide();
							$('#quick_rate_form input[name="qrq_loan_product_hidden"]').val('1');
							$('#quick_rate_form .multiSelect .btn-group .btn-default').removeClass('error');
						} else {
							$('#quick_rate_form #qrq_loan_product_hidden-error').html("Please select your loan product.").show();
							$('#quick_rate_form input[name="qrq_loan_product_hidden"]').val('');
							$('#quick_rate_form .multiSelect .btn-group .btn-default').addClass('error');
							$('#quick_rate_form input[name="qrq_loan_product_hidden"]').valid();							
						}
					}
				});
				$('#quick_rate_ref_form .select_loan_products').multiselect({
					nonSelectedText:"Loan Product",
					includeSelectAllOption: true,
					selectAllText: 'Unsure',
					onChange: function(option, checked, select) {
						var data=[];
						var $el=$('#quick_rate_ref_form .select_loan_products');
						$el.find('option:selected').each(function(){
							data.push($(this).val());
						});
						if(data.length > 0) {
							$('#quick_rate_ref_form #qrq_loan_product_hidden-error').hide();
							$('#quick_rate_ref_form input[name="qrq_loan_product_hidden"]').val('1');	
							$('#quick_rate_ref_form .multiSelect .btn-group .btn-default').removeClass('error');
						} else {
							$('#quick_rate_ref_form #qrq_loan_product_hidden-error').html("Please select your loan product.").show();
							$('#quick_rate_ref_form input[name="qrq_loan_product_hidden"]').val('');
							$('#quick_rate_ref_form .multiSelect .btn-group .btn-default').addClass('error');
							$('#quick_rate_ref_form input[name="qrq_loan_product_hidden"]').valid();
						}
					},
					onSelectAll: function() {
						var data=[];
						var $el=$('#quick_rate_ref_form .select_loan_products');
						$el.find('option:selected').each(function(){
							data.push($(this).val());
						});
						if(data.length > 0) {
							$('#quick_rate_ref_form #qrq_loan_product_hidden-error').hide();
							$('#quick_rate_ref_form input[name="qrq_loan_product_hidden"]').val('1');
							$('#quick_rate_ref_form .multiSelect .btn-group .btn-default').removeClass('error');
						} else {
							$('#quick_rate_ref_form #qrq_loan_product_hidden-error').html("Please select your loan product.").show();
							$('#quick_rate_ref_form input[name="qrq_loan_product_hidden"]').val('');
							$('#quick_rate_ref_form .multiSelect .btn-group .btn-default').addClass('error');
							$('#quick_rate_ref_form input[name="qrq_loan_product_hidden"]').valid();
						}
					}
				});
				$(document).on("click","#show_quote_submit",function() {
						var data=[];
						var $el=$('#quick_rate_form .select_loan_products');
						$el.find('option:selected').each(function(){
							data.push($(this).val());
						});
						if(data.length > 0) {
							$('#quick_rate_form .multiSelect .btn-group .btn-default').removeClass('error');
							$('#quick_rate_form input[name="qrq_loan_product_hidden"]').val('1');
						} else {
							$('#quick_rate_form .multiSelect .btn-group .btn-default').addClass('error');
							$('#quick_rate_form input[name="qrq_loan_product_hidden"]').val('');
						}
				});
				$(document).on("click","#show_quote_ref_submit",function() {
						var data=[];
						var $el=$('#quick_rate_ref_form .select_loan_products');
						$el.find('option:selected').each(function(){
							data.push($(this).val());
						});
						if(data.length > 0) {
							$('#quick_rate_ref_form .multiSelect .btn-group .btn-default').removeClass('error');
							$('#quick_rate_ref_form input[name="qrq_loan_product_hidden"]').val('1');
						} else {
							$('#quick_rate_ref_form .multiSelect .btn-group .btn-default').addClass('error');
							$('#quick_rate_ref_form input[name="qrq_loan_product_hidden"]').val('');
						}
				});
				if($("#loan_products_arr").val()) {
					var loan_product_json = JSON.parse($("#loan_products_arr").val()); 
					$("#qrq_submit .select_loan_products").multiselect('select',loan_product_json);
				}
				$('#quick_rate_form .multiselect').on('blur', function(){
						var data=[];
						var $el=$('#quick_rate_form .select_loan_products');
						$el.find('option:selected').each(function(){
							data.push($(this).val());
						});
						if(data.length > 0) {
							$('#quick_rate_form #qrq_loan_product_hidden-error').hide();
							$('#quick_rate_form input[name="qrq_loan_product_hidden"]').val('1');
							$('#quick_rate_form .multiSelect .btn-group .btn-default').removeClass('error');
						} else {						
							$('#quick_rate_form #qrq_loan_product_hidden-error').html("Please select your loan product.").show();
							$('#quick_rate_form input[name="qrq_loan_product_hidden"]').val('');
							$('#quick_rate_form .multiSelect .btn-group .btn-default').addClass('error');
							$('#quick_rate_form input[name="qrq_loan_product_hidden"]').valid();
						}
				});
				$('#quick_rate_ref_form .multiselect').on('blur', function(){
					var data=[];
						var $el=$('#quick_rate_ref_form .select_loan_products');
						$el.find('option:selected').each(function(){
							data.push($(this).val());
					});
					if(data.length > 0) {
						$('#quick_rate_ref_form #qrq_loan_product_hidden-error').hide();
						$('#quick_rate_ref_form input[name="qrq_loan_product_hidden"]').val('1');
						$('#quick_rate_ref_form .multiSelect .btn-group .btn-default').removeClass('error');
					} else {
						$('#quick_rate_ref_form #qrq_loan_product_hidden-error').html("Please select your loan product.").show();
						$('#quick_rate_ref_form input[name="qrq_loan_product_hidden"]').val('');
						$('#quick_rate_ref_form .multiSelect .btn-group .btn-default').addClass('error');
						$('#quick_rate_ref_form input[name="qrq_loan_product_hidden"]').valid();	
					}
				});
                                $('#landing_pre_qual_form').validate({
                                        errorElement: "div",
                                        errorClass: "error",
                                                    onfocusout: function(e) {
                                                                 this.element(e);
                                                         },
                                                    ignore: [],
                                        rules: {
                                            "tpl_how_help": {required: true},
                                             "tpl_zipcode": {
                                                required: true,number:true,qrq_greaterThan:true,
                                                                    checkZipCode:true,
                                                                    checkZipCodeService:true,
                                                minlength:5						   
                                            },
                                        },
                                        messages: {
                                            "tpl_how_help": {required: "Please select your home goal."},
                                            "tpl_zipcode": {
                                                required: "Please enter zip code",qrq_greaterThan:"Please enter the zip code greater than zero.",
                                                                    checkZipCode:"Please enter a valid zipcode.",
                                                                    checkZipCodeService:"Sorry, the location entered by you is currently not serviced by us. We will be there soon.",
                                                minimum:"Please enter a valid zip code."
                                            },
                                        },
                                        submitHandler: function(form) {
                                            $('.nav-tabs > .active').next('li').find('a').trigger('click');
                                            return false;
                                        }
                                });
                                $('#landing_pre_qual_2_form').validate({
                                        errorElement: "div",
                                        errorClass: "error",
                                                    onfocusout: function(e) {
                                                                 this.element(e);
                                                         },
                                        errorPlacement: function(error, element) {
                                            if (element.attr("name") == "tpl_purchase_price" ) {
                                                
                                              error.insertAfter($("#tpl_purchase_price").closest(".input-group"));
                                              
                                            } else if (element.attr("name") == "tpl_down_pay") {
                                                
                                              error.insertAfter($("#tpl_down_pay").closest(".input-group"));
                                            
                                            } else if (element.attr("name") == "tpl_down_pay_int") {
                                                
                                              error.insertAfter($("#tpl_down_pay_int").closest(".input-group"));
                                            
                                            } else if (element.attr("name") == "tpl_current_mortgage") {
                                                
                                              error.insertAfter($("#tpl_current_mortgage").closest(".input-group"));
                                              
                                            } else if (element.attr("name") == "tpl_cashout") {
                                                
                                              error.insertAfter($("#tpl_cashout").closest(".input-group"));
                                              
                                            } else if (element.attr("name") == "tpl_est_property") {
                                                
                                              error.insertAfter($("#tpl_est_property").closest(".input-group"));
                                              
                                            }
                                            else {
                                                error.insertAfter(element);
                                            }
                                          },
                                        rules: {
                                            "tpl_refinance_purpose": {required: true},
                                            "tpl_purchase_price": {required : true,number:true,qrq_greaterThan:true},
                                            "tpl_down_pay": {required : true,number:true,qrq_greaterThan:true,
							qrq_lessThan: '#tpl_purchase_price'},
                                             "tpl_down_pay_int": {number:true},
                                             "tpl_cashout": {required : true,qrq_greaterThan:true},
                                             "tpl_est_property": {required : true,qrq_greaterThan:true},
                                             "tpl_current_mortgage": {required : true},
                                             "tpl_desire_pgm": {required : true},
                                             "tpl_credit_score": {required : true},
                                        },
                                        messages: {
                                            "tpl_refinance_purpose": {required: "Please select the purpose of refinance."},
                                            "tpl_purchase_price": {required : "Please enter the purchase price of the property you would like to purchase.",qrq_greaterThan:"Please enter the purchase price greater than zero."},
                                            "tpl_down_pay": {required : "Please enter the down payment amount.",qrq_greaterThan:"Please enter the down payment greater than zero.",
							qrq_lessThan: "The down payment amount cannot be equal to or more than the purchase price."},
                                            "tpl_down_pay_int": {required:"Please enter the valid number"},
                                            "tpl_cashout": {required : "Please enter the cash out amount",qrq_greaterThan:"Amount should be greater than zero"},
                                            "tpl_est_property": {required : "Please enter the estimated property value",qrq_greaterThan:"Amount should be greater than zero"},
                                            "tpl_current_mortgage": {required : "Please enter your current mortgage balance"},
                                            "tpl_desire_pgm": {required : "please select a loan product"},
                                            "tpl_credit_score": {required : "Please select your credit score range"},
                                        },
                                        submitHandler: function(form) { 
                                            $('.nav-tabs > .active').next('li').find('a').trigger('click');
                                            return false;
                                        }
                                });
                                $("#tpl_customer_mobile").mask("(999) 999-9999",{placeholder:" "});
                                jQuery.validator.addMethod("alphabetsOnly", function(value, element) {
                                    return this.optional(element) || /^[a-z ]+$/i.test(value);
                                }, "Alphabets only"); 
                                $('#landing_pre_qual_3_form').validate({
                                        errorElement: "div",
                                        errorClass: "error",
                                                    onfocusout: function(e) {
                                                                 this.element(e);
                                                         },
                                                    ignore: [],
                                        rules: {
                                            "tpl_customer_fname": {required : true,alphabetsOnly: true},
                                            "tpl_customer_lname": {required : true,alphabetsOnly: true},
                                             "tpl_customer_mobile": {required : true,phoneUS:true},
                                             "tpl_customer_email": {required : true,email:true},
                                        },
                                        messages: {
                                            "tpl_customer_fname": {required : "Please enter your first name",alphabetsOnly:"Please enter only alphabet letters"},
                                            "tpl_customer_lname": {required : "Please enter your last name",alphabetsOnly:"Please enter only alphabet letters"},
                                            "tpl_customer_mobile": {required : "please enter a valid mobile number",phoneUS:"Please enter a valid mobile number"},
                                            "tpl_customer_email": {required : "Please enter a valid email address",email:"Please enter a valid email address"},
                                        },
                                        submitHandler: function(form) {
                                            var $inputs = $('#landing_pre_qual_form :input');
                                            var values_form_1 = {};
                                            $inputs.each(function() {
                                                values_form_1[this.name] = $(this).val();
                                            });
                                            
                                            var $inputs2 = $('#landing_pre_qual_2_form :input');
                                            var values_form_2 = {};
                                            $inputs2.each(function() {
                                                values_form_2[this.name] = $(this).val();
                                            });
                                            
                                            var $inputs3 = $('#landing_pre_qual_3_form :input');
                                            var values_form_3 = {};
                                            $inputs3.each(function() {
                                                values_form_3[this.name] = $(this).val();
                                            });
                                            var zip_info = JSON.parse(values_form_1['tpl_zipcode_hidden']);
                                            
                                            var source_uri = $(location).attr('search');
                                            var mobile_number = values_form_3['tpl_customer_mobile'];
                                            mobile_number = mobile_number.replace(/[^0-9\.]/g, '');
                                            var refinPurp;
                                            if(values_form_2['tpl_refinance_purpose'] != null){
                                               refinPurp = values_form_2['tpl_refinance_purpose'];
                                            }else{
                                                refinPurp = null;
                                            }
                                            var loanx_data = {"LeadId": "00000000-0000-0000-0000-000000000000","FirstName": values_form_3['tpl_customer_fname'],"LastName": values_form_3['tpl_customer_lname'],"LoanPurpose":values_form_1['tpl_how_help'],"RefinancePurpose": refinPurp,"CashOutAmount": values_form_2['tpl_cashout'],"CurrentMortgageBalance": values_form_2['tpl_current_mortgage'],"HouseTypeId": values_form_2['tpl_property_type'],"OccupancyTypeId": 2,"EstimatedPurchaseAmount": values_form_2['tpl_est_property'],"DownPayment": values_form_2['tpl_down_pay'],"City": zip_info['city'],"StateCode": zip_info['state'],"ZipCode": zip_info['zip'],"CreditScoreRange": values_form_2['tpl_credit_score'],"IsVaLoanType": false,"LeadMobileNumber": mobile_number,"LeadEmail": values_form_3['tpl_customer_email'],"CouponType": "1","CouponCode": "12345","OtherMarketingInfo": ""};
                                            $.ajax({
                                                    url: 'http://tavantdockerhostnew.cloudapp.net:5101/api/v1.0/prequal',
                                                    dataType : "json",
                                                    contentType: "application/json; charset=utf-8",
                                                    method:'POST',
                                                    data: JSON.stringify(loanx_data),
                                            });
                                            $(location).attr('href', drupalSettings.path.baseUrl+'tp_pre_qual_thank'+source_uri+'&cname='+values_form_3['tpl_customer_fname']);   
                                            return false;
                                        }
                                });
                                $('.btnPrevious').click(function (event) {
                                    $('.nav-tabs > .active').prev('li').find('a').trigger('click');
                                    event.preventDefault();
                                });
                                var hidden_inputs_refin = 0;
                                var hidden_inputs_purch = 0;
                                $('.tpl_tab_2').on('click', function(event) {
                                    
                                    if($('#landing_pre_qual_form').valid()){
                                       $('.welcome-placehlder h3').empty(); 
                                       $('.nav-tabs li:nth-child(1)').addClass( "valid" );
                                       var $inputs = $('#landing_pre_qual_form :input');
                                       var how_help;
                                       $inputs.each(function() {
                                           if(this.name === 'tpl_how_help') {
                                               how_help = $(this).val();
                                           }
                                       });
                                       if(how_help == 2) {
                                           if(hidden_inputs_purch != 1) {
                                                var purch =   $('#landing_pre_qual_2_form').find('.refin-input').length;
                                                if(purch) {
                                                    $('.cd-inputs .refin-input').remove();
                                                }
                                                var purappendhtml = ''; 
                                                purappendhtml+= '<div class="purch-input"><div class="form-group"><label>Purchase Price</label><div class="input-group"><span class="input-group-addon">$</span> <input class="form-control" id="tpl_purchase_price" name="tpl_purchase_price" placeholder="Purchase Price" required="" type="text" onkeypress="return isNumber(event)" maxlength="9"/></div></div><div class="form-group"><label>Down Payment</label><div class="row"><div class="col-lg-7"><div class="input-group"><span class="input-group-addon">$</span><input class="form-control" id="tpl_down_pay" name="tpl_down_pay" placeholder="Down Payment" required="" type="text" onkeypress="return isNumber(event)" maxlength="9"/></div></div><div class="col-lg-5"><div class="input-group"><input class="form-control globalPercentCut" id="tpl_down_pay_int" name="tpl_down_pay_int" type="text" maxlength="6"/><span class="input-group-addon">%</span></div></div></div></div></div>';
                                                $('#landing_pre_qual_2_form .cd-inputs').prepend(purappendhtml);
                                                hidden_inputs_purch = 1;
                                                hidden_inputs_refin = 0;
                                            } 
                                        }else if(how_help == 3) {
                                            if(hidden_inputs_refin != 1) {
                                                var refin =   $('#landing_pre_qual_2_form').find('.purch-input').length;
                                                if(refin) {
                                                    $('.cd-inputs .purch-input').remove();
                                                }
                                                var appendhtml = '';
                                                appendhtml+= '<div class="refin-input"><div class="form-group"><label>Purpose of refinance</label> <div class="row"><div class="col-lg-10"><select class="form-control" name="tpl_refinance_purpose" id="tpl_refinance_purpose"><option value>Select</option><option value="2">Cashout</option><option value="4">Change rate</option><option value="8">Payoff debts</option></select></div><div class="col-lg-2"><a href="#" data-toggle="tooltip" data-placement="top" title="By using payoff debts, you can pay off your high interest debts using this option" data-original-title="By using payoff debts, you can pay off your high interest debts using this option"><img src="'+drupalSettings.path.baseUrl+'themes/basis/images/info.png" alt=""></a></div></div></div>\n\
                                                <div class="form-group refin-cash" style="display:none"><label>Cashout Amount</label><div class="input-group"><span class="input-group-addon">$</span> <input class="form-control" id="tpl_cashout" name="tpl_cashout" placeholder="Cash out amount" required="" type="text" onkeypress="return isNumber(event)" maxlength="9"/></div></div><div class="form-group"><label>Estimated value of property</label> <div class="input-group"><span class="input-group-addon">$</span><input class="form-control" id="tpl_est_property" name="tpl_est_property" placeholder="Estimated property value" required="" type="text" onkeypress="return isNumber(event)" maxlength="9"/></div></div><div class="form-group"><label>Current Mortgage Balance</label><div class="input-group"><span class="input-group-addon">$</span> <input class="form-control" id="tpl_current_mortgage" name="tpl_current_mortgage" placeholder="Current mortgage balance" required="" type="text" onkeypress="return isNumber(event)" maxlength="9"/><div></div></div>';
                                                $('#landing_pre_qual_2_form .cd-inputs').prepend(appendhtml);
                                                hidden_inputs_refin = 1;
                                                hidden_inputs_purch = 0;
                                            } 
                                       }
                                       $('#tpl_refinance_purpose').on('change',function () {
                                            if($(this).val() == 2 ) {
                                                $('.cd-inputs .refin-cash').show();
                                            }else {
                                                $('.cd-inputs .refin-cash').hide();
                                            }    
                                        });
                                        $("#tpl_down_pay").change(function(){
                                            var purchase = $('#tpl_purchase_price').val();
                                            var downpay = $('#tpl_down_pay').val();
                                            var round_val = downpay / purchase * 100;
                                            if(!$('#tpl_purchase_price').val()) {
                                                $("#tpl_down_pay_int").val();
                                            }else {
                                                if(round_val > 99.999){
                                                    $("#tpl_down_pay_int").val(99.999);
                                                }else{
                                                    var digitLength = round_val.toString().length;
                                                    if(digitLength > 6) {
                                                      var digitFirst = round_val.toFixed(3);
                                                      $("#tpl_down_pay_int").val(digitFirst);
                                                    }else {
                                                      $("#tpl_down_pay_int").val(round_val);
                                                    }
                                                }
                                            }
                                            
                                        });
                                        $("#tpl_down_pay_int").change(function(){
                                            var purchase = $('#tpl_purchase_price').val();
                                            var dp_int;
                                            dp_int = $('#tpl_down_pay_int').val();
                                            if($('#tpl_down_pay_int').val() > 99.999){ 
                                                dp_int = $('#tpl_down_pay_int').val(99.999);
                                            }else {
                                                dp_int = $('#tpl_down_pay_int').val();
                                            }
                                            var round_val = dp_int * purchase /100;
                                            if(!$('#tpl_purchase_price').val()) {
                                                $("#tpl_down_pay").val();
                                            }else if($('#tpl_purchase_price').val().length != 0) {
                                                if($.isNumeric(round_val)) {
                                                   var noDecimal = round_val.toFixed(0);
                                                   $("#tpl_down_pay").val(noDecimal );
                                                }else {
                                                   $("#tpl_down_pay").val();
                                                }
                                            }
                                        });
                                        $(function($) {
                                            // Only allow values up to 99.999
                                            $('.globalPercentCut').autoNumeric('init', {  vMax: '99.999' });    
                                        });

                                       event.preventDefault();
                                    }else{
                                        return false;
                                    }
                                });
                                $('.tpl_tab_3').on('click', function(event) {
                                    if($('#landing_pre_qual_2_form').valid() && $('#landing_pre_qual_form').valid()){
                                        $('.nav-tabs li:nth-child(2)').addClass( "valid" );
                                        var source_uri = $(location).attr('search');
                                        
                                        if (source_uri.indexOf("mail-offer") >= 0) {
                                            $('.mail-offer').show();
                                        }else {
                                            $('.mail-offer').hide();
                                        }
                                         
                                       event.preventDefault();
                                    }else{
                                       return false;
                                    }
                                });
                                $('#tpl_purchase_price').on('paste', function(e) {
                                    e.preventDefault();
                                });
								
								// setting values based on calculator pre filled values
								if(window.localStorage.getItem("HM_default_value"))
										var default_HM = window.localStorage.getItem("HM_default_value");
									else if(window.sessionStorage.getItem("HM_default_value"))
										var default_HM = window.sessionStorage.getItem("HM_default_value");									
										
								if(window.localStorage.getItem("DP_default_value"))
										var default_DP = window.localStorage.getItem("DP_default_value");
									else if(window.sessionStorage.getItem("DP_default_value"))
										var default_DP = window.sessionStorage.getItem("DP_default_value");									
										
								if(window.localStorage.getItem("LT_default_value"))
										var default_LT = window.localStorage.getItem("LT_default_value");
									else if(window.sessionStorage.getItem("LT_default_value"))
										var default_LT = window.sessionStorage.getItem("LT_default_value");
									
								if(window.localStorage.getItem("CMB_default_value"))
										var default_CMB = window.localStorage.getItem("CMB_default_value");
									else if(window.sessionStorage.getItem("CMB_default_value"))
										var default_CMB = window.sessionStorage.getItem("CMB_default_value");
									
								if(window.localStorage.getItem("LTIM_default_value"))
										var default_LT = Math.round(window.localStorage.getItem("LTIM_default_value")/12);
									else if(window.sessionStorage.getItem("LTIM_default_value"))
										var default_LT = Math.round(window.sessionStorage.getItem("LTIM_default_value")/12);
									
								if(window.localStorage.getItem("CNM_default_value"))
										var default_CNM = window.localStorage.getItem("CNM_default_value");
									else if(window.sessionStorage.getItem("CNM_default_value"))
										var default_CNM = window.sessionStorage.getItem("CNM_default_value");
								
								if($("#loanTermsConfig").val()) {
									var loan_terms_json = JSON.parse($("#loanTermsConfig").val()); 
									if (default_LT in loan_terms_json) default_LT = String(default_LT)+" year fixed"; else default_LT = "";
								} else {									
									default_LT = String(default_LT)+" year fixed";
								}
								
								$("#quick_rate_landing_default #qrq_purchase_price").val(default_HM);
								$("#quick_rate_landing_default #qrq_down_payment").val(default_DP);
								$("#quick_rate_landing_default #qrq_current_balance").val(default_CMB);
								$("#quick_rate_landing_default #quick_rate_form #qrq_customer_name,#quick_rate_landing_default #quick_rate_ref_form #qrq_customer_name").val(default_CNM);
								if(default_LT !="") $("#quick_rate_landing_default #quick_rate_form .select_loan_products").multiselect('select',[default_LT]);
								if(default_LT !="") $("#quick_rate_landing_default #quick_rate_ref_form .select_loan_products").multiselect('select',[default_LT]);								
								$("#quick_rate_landing_default #qrq_home_value").val(default_HM);								
								if(window.location.hash.substr(1) == "refinance") {
									$('#quick-rates ul.nav-tabs li').removeClass("active");
									$('#quick-rates div.tab-content div').removeClass("active");
									$('#quick-rates div.tab-content div').removeClass("in");
									$('a[href^="#refinance"]').parent().addClass('active');
									$('#quick-rates #refinance').addClass("active");
									$('#quick-rates #refinance').addClass("in");
								}
})(jQuery);
(function ( $ ) {
 
    $.fn.bootcomplete = function(options) {
        
        var defaults = {
            url : "/search.php",
            method : 'get',
            wrapperClass : "bc-wrapper",
            menuClass : "bc-menu",
            idField : true,
            idFieldName : $(this).attr('name')+"_id",
            minLength : 3,
            dataParams : {},
            formParams : {}
        }
        
        var settings = $.extend( {}, defaults, options );
        
        $(this).attr('autocomplete','off')
        $(this).wrap('<div class="'+settings.wrapperClass+'"></div>')
        if (settings.idField) {
            if ($(this).parent().parent().find('input[name="' + settings.idFieldName + '"]').length !== 0) {
                //use existing id field
            } else {
                //there is no existing id field so create one
                $('<input type="hidden" name="' + settings.idFieldName + '" value="">').insertBefore($(this))
            }
        }
        $('<div class="'+settings.menuClass+' list-group"></div>').insertAfter($(this))
        
        $(this).on("keyup", searchQuery);
        $(this).on("focusout", hideThat)

        var xhr;
        var that = $(this)

        function hideThat() {
            if ($('.list-group-item' + ':hover').length) {
                return;
            }
            $(that).next('.' + settings.menuClass).hide();
        }
        
        function searchQuery(){
            
            var arr = [];
            $.each(settings.formParams,function(k,v){
                arr[k]=$(v).val()
            })
            var dyFormParams = $.extend({}, arr );
            var Data = $.extend({query: $(this).val()}, settings.dataParams, dyFormParams);
            
            if(!Data.query){
                $(this).next('.'+settings.menuClass).html('')    
                $(this).next('.'+settings.menuClass).hide()    
            }
            
            if(Data.query.length >= settings.minLength){
                
                if(xhr && xhr.readyState != 4){
                    xhr.abort();
                }
                
                xhr = $.ajax({
                    type: settings.method,
                    url: settings.url,
                    data: Data,
                    dataType: "json",
                    success: function( json ) {
                        var results = '';
						var start = 1;
                        $.each( json, function(i, j) {
							if(start==1) $("#first_section").val(j.id);
							start++;
                            results += '<a href="'+j.in_link+'" target="_blank" class="list-group-item" data-id="'+j.id+'" data-label="'+j.label+'">'+j.label+'</a>'
                        });
                        
                        $(that).next('.'+settings.menuClass).html(results)
                        //$(that).next('.'+settings.menuClass).children().on("click", selectResult)
                        $(that).next('.'+settings.menuClass).show()
                   
                    }
                })
            }
        }
        
        function selectResult(){
            $(that).val($(this).data('label'))
            if (settings.idField) {
                if ($(that).parent().parent().find('input[name="' + settings.idFieldName + '"]').length !== 0) {
                    //use existed id field
                    $(that).parent().parent().find('input[name="' + settings.idFieldName + '"]').val($(this).data('id'));
					//ensure we trigger the onchange so we can do stuff
					$(that).parent().parent().find('input[name="' + settings.idFieldName + '"]').trigger('change');
                }
                else {
                    //use created id field
                    $(that).prev('input[name="' + settings.idFieldName + '"]').val($(this).data('id'));
					//ensure we trigger the onchange so we can do stuff
					$(that).prev('input[name="' + settings.idFieldName + '"]').trigger('change');
                }
            }
            $(that).next('.' + settings.menuClass).hide();
            return false;
        }

        return this;
    };
 
}( jQuery ));
jQuery(document).ready(function() {
	jQuery('#header_search_term').bootcomplete({
			url:'/global_search',
			minLength : 2,
	});
	jQuery('#header_search_term').keypress(function(e) {
		var search_term = jQuery(this).val();
		if(e.which == 13) {
			window.location.href= "/global_search_results?q="+search_term;
		}
	});
});
function isNumber(evt) {
	evt = (evt) ? evt : window.event;
	var charCode = (evt.which) ? evt.which : evt.keyCode;
	if (charCode > 31 && (charCode < 48 || charCode > 57)) {
		return false;
	}
	return true;
}
function onlyAlphabets(e) {
                if (window.event) {
                    var charCode = window.event.keyCode;
                }
                else if (e) {
                    var charCode = e.which;
                }
                else { return true; }
                if ((charCode > 64 && charCode < 91) || (charCode > 96 && charCode < 123) || charCode == 39 || charCode == 45 || charCode == 8 || charCode == 127 || charCode == 32 )
                    return true;
                else
                    return false;
}

;
