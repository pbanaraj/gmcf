<?php

/**
 * @file
 * Functions to support theming in the Bartik theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;


/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function basis_preprocess_node(&$variables) {
	$node = \Drupal::routeMatch()->getParameter('node');
	//if ($variables['entity_type'] == 'node') {
		$variables['node'] = $variables['elements']['#node'];
	//}
	
	if($variables['node']->bundle()== 'basic_page'){
	    $variables['#attached']['library'][] = 'basis/calculators_css';
		$variables['#attached']['library'][] = 'basis/calculators_js';
		$config_values = \Drupal::configFactory()->getEditable('demo.settings')->get("calcconfig");
		$pmiconfig_values = \Drupal::configFactory()->getEditable('demo.settings')->get("pmiconfig");
                
                $armconfig_values = \Drupal::configFactory()->getEditable('demo.settings')->get("armconfig");
                
                $taxslab_config_values = \Drupal::configFactory()->getEditable('demo.settings')->get("taxslabconfig");
               
		$pmi_array = array_chunk($pmiconfig_values,3);
		$pmi_final_array = array_chunk($pmi_array, ceil(count($pmi_array) / 2));
                
                $arm_array = array_chunk($armconfig_values,3);
                
                //$arm_final_array = array_chunk($arm_array, ceil(count($arm_array) / 2));
                
                
                $taxslab_config_values =  array_chunk($taxslab_config_values,3);
		$ha_config_values = \Drupal::configFactory()->getEditable('demo.settings')->get("hacalcconfig");
		$variables['#attached']['drupalSettings']['basis']['calculators_js']['config_values'] = $config_values;		
		$variables['#attached']['drupalSettings']['basis']['calculators_js']['loan_term_options'] = json_encode(array("10"=>"10 Years","15"=>"15 Years","20"=>"20 Years","30"=>"30 Years"));
		$variables['#attached']['drupalSettings']['basis']['calculators_js']['factorB'] = json_encode($pmi_final_array[0]);
		$variables['#attached']['drupalSettings']['basis']['calculators_js']['factorA'] = json_encode($pmi_final_array[1]);
                
                $variables['#attached']['drupalSettings']['basis']['calculators_js']['armfactorB'] = json_encode($arm_array);
		$variables['#attached']['drupalSettings']['basis']['calculators_js']['armfactorA'] = json_encode($arm_array);
                
		$variables['#attached']['drupalSettings']['basis']['calculators_js']['ha_config_values'] = $ha_config_values;	
                $variables['#attached']['drupalSettings']['basis']['calculators_js']['taxslab_config_values'] = json_encode($taxslab_config_values);	
              
		for($i=1;$i<=30;$i++) {
			$remaining_term[$i] = $i;
		}
		$variables['#attached']['drupalSettings']['basis']['calculators_js']['rem_term_options'] = json_encode($remaining_term);
		$variables['#attached']['library'][] = 'basis/careers_js';
		$homepagerates = \Drupal::configFactory()->getEditable('demo.settings')->get("homepagerates");
		foreach($homepagerates as $key => $value){            
            preg_match("/[^\\d*](\\d.*)/", $key, $matches);
            $rates1[$matches[1]]  = $value;
		}
		$variables['#attached']['drupalSettings']['basis']['homepage']['rates'] = $rates1;
	}
        
        $route_match = \Drupal::routeMatch();
        if ($route_match->getRouteName() == 'entity.node.preview') {
          $variables['#attached']['library'][] = 'preview/custom-css-js';
        }
	
}
/**
* Implements hook_preprocess_field().
*/
function basis_preprocess_field(&$variables, $hook) {
    /********************* checking and adding $variables['node'] to access the node object in field template of home page blocks *****************************/
    if ($variables['entity_type'] == 'node') {
      $variables['node'] = $node = $variables['element']['#object'];
    }

    /******************************************************************************/
    if(is_object($node)){
    $authenticated = \Drupal::currentUser()->isAuthenticated();
        if($authenticated){
            $roles = \Drupal::currentUser()->getRoles();
            $variables['logged_in_user_status'] = true;
            if((($node->getType() == 'home_page_blocks' || $node->getType() == 'banner' ) && $variables['element']['#field_name'] == 'body' && (in_array('approver',$roles) || in_array('administrator',$roles) )) || ($variables['element']['#field_name'] == 'field_block_related_markup' && $node->getType() == 'home_page_blocks' && (in_array('approver',$roles) || in_array('administrator',$roles) )) ){
                $current_path = \Drupal::service('path.current')->getPath();
                $nodewrapper = \Drupal::request()->attributes;
                if(null !== $nodewrapper->get("node_preview") && preg_match('/preview/',$current_path)) {
                    $variables['ishomepage'] = false;
                }else{
                     $variables['ishomepage'] = true;
                }
            }else{
                $variables['ishomepage'] = false;
            }
        }else {
             $variables['logged_in_user_status'] = false;
        }
    }
    switch ($variables['element']['#field_name']) {
      case 'field_node_css':
        $variables['node_css'] = htmlspecialchars_decode($variables['items'][0]['content']['#context']['value']);
        break;
		case 'field_node_js':
        $variables['node_js'] = htmlspecialchars_decode($variables['items'][0]['content']['#context']['value']);
        break;
		case 'body':
        $variables['body'] = $variables['items'][0]['content']['#context']['value'];
        break;
    }
}
/**
* Implements hook_preprocess_page().
*/
function basis_preprocess_page(&$variables) {
    
    $current_path = \Drupal::service('path.current')->getPath();
  
    $variables['#attached']['drupalSettings']['basis']['quick_rate']['zip_url'] = \Drupal\Core\Site\Settings::get('zip_url');
    
    if($current_path == '/tp_showleadinfo' || $current_path == '/tp_pre_qual' || $current_path == '/tp_pre_qual_thank') { 
        $variables['landing_header'] = 'landing-page-header';
    }
    
    $variables['#attached']['drupalSettings']['path']['wm_cd_integration_api'] = \Drupal\Core\Site\Settings::get('wm_cd_integration_api');
    $variables['#attached']['drupalSettings']['path']['wm_cd_redirection'] = \Drupal\Core\Site\Settings::get('wm_cd_redirection');   
    $variables['#attached']['drupalSettings']['path']['lnx_api_url_preql'] = \Drupal\Core\Site\Settings::get('lnx_api_url_preql');   
	$variables['#attached']['drupalSettings']['path']['lnx_api_url_preql_leadinfo'] = \Drupal\Core\Site\Settings::get('lnx_api_url_preql_leadinfo');
	$variables['#attached']['drupalSettings']['path']['lnx_api_url_get_lead'] = \Drupal\Core\Site\Settings::get('lnx_api_url_get_lead');
    
    $node = \Drupal::request()->attributes;
    if(null !== $node->get("node_preview") && preg_match('/preview/',$current_path)) {
        $nid = $node->get("node_preview")->get('nid')->value;
        $node_obj = node_load($nid);
        if($node_obj->getType() == 'basic_page') {
            if($node_obj->get('field_ctype')->value == 'tpl' || $node_obj->get('field_ctype')->value == 'tpl_thank' || $node_obj->get('field_ctype')->value == 'tpl_showlead') {
               $header_block = \Drupal\block\Entity\Block::load('headerlanding');
               $header_block_content = \Drupal::entityManager()->getViewBuilder('block')->view($header_block);
               $variables['page']['header'] = $header_block_content;
               $footer_block = \Drupal\block\Entity\Block::load('footerlanding');
               $footer_block_content =  \Drupal::entityManager()->getViewBuilder('block')->view($footer_block);
              $variables['page']['footer'] = $footer_block_content;
            }elseif($node_obj->get('field_ctype')->value == "home_page_blocks"){
                $template = $variables['page']['content']['system_main']['#markup'];
                //$stringmodified = str_replace('<button','<button disabled',$template->__toString());
                $stringmodified = str_replace('edit_homesections','edit_homesections hidden',$template->__toString());
                $variables['page']['content']['system_main']['#markup'] = $template->create($stringmodified);
            }
        }
    }elseif(null !== $node->get('node')){
        $authenticated = \Drupal::currentUser()->isAuthenticated();
        if($authenticated){
            $roles = \Drupal::currentUser()->getRoles();
            $variables['logged_in_user_status'] = true;
            $variables['logged_in_user_status']['#cache']['context'] = true;
            if($node->get('node')->getType() == 'basic_page' && $node->get('node')->get('field_ctype')->value == "home_page_blocks" && (in_array('approver',$roles) || in_array('administrator',$roles) )){
                    $variables['ishomepage'] = true;
                    $nid = $node->get('node')->id();
                    $template = $variables['page']['content']['system_main']['#markup'];
                    $stringmodified = "<div class='edit_homesections mainpage_section'><a href='/node/".$nid."/edit?destination=/home'><span class='glyphicon glyphicon-pencil'></span> Edit Home Page</a></div>".$template->__toString();
                    $variables['page']['content']['system_main']['#markup'] = $template->create($stringmodified);
            }
        }
    }
}


/**
 *  Implements hook_preprocess_html();
*
*/

function basis_preprocess_html(&$variables){
    
     $query_string = \Drupal::request()->getQueryString();
     $path =  \Drupal::service('path.current')->getPath();
     
     $path_args = explode('/', $path);

     if (preg_match('/collapse/',$path_args[count($path_args)-1])){
         $nid = str_replace("collapse", "", $path_args[count($path_args)-1]);
         $node = \Drupal::entityManager()->getStorage('node')->load($nid);
         
        $ogtitle = [
                                '#tag' => 'meta',
                                '#attributes' => [
                                 'property' => 'og:title',
                                 'content' => $node->getTitle(),
                                ],
                          ];

        $ogdescription = [
                                '#tag' => 'meta',
                                '#attributes' => [
                                 'property' => 'og:description',
                                 'content' =>  strip_tags($node->get('field_product_section_desc')->value)
                                ],
                          ];
        
        $variables['page']['#attached']['html_head'][] = [$ogtitle, 'og:title'];
        $variables['page']['#attached']['html_head'][] = [$ogdescription, 'og:description'];
      
 
     }
}
function basis_preprocess_search_result(&$variables) {
	$node = $variables['result']['node'];	
	$nid = $node->get('nid')->value;				
	$c_type = $node->getType();
	$in_link = "";
	switch($c_type) {
				case "basic_page":
					$in_link = "/node/".$nid;
					break;
				case "calculators":
					$in_link = "/calculators";
					break;
				case "products":
					$in_link = "/products";
					break;
				case "education_tiles":
					$in_link = "/mortgage_school_detail";
					break;
				case "education_sections":
					$in_link = "/mortgage_school_sections_detail?collapse".$nid;
					break;
				case "why_us":
					$in_link = "/why-goodmortgage";
					break;
				case "testimonials":
					$in_link = "/";
					break;
				case "why_us_certificates":
					$in_link = "/why-goodmortgage";
					break;
				case "why_us_testimonials":
					$in_link = "/why-goodmortgage";
					break;
				case "good_mortgate_tv":
					$in_link = "/good-mortgage-tv";
					break;
				case "job_openings":
					$in_link = "/careers";
					break;
				case "leaders":
					$in_link = "/about-us";
					break;
				case "mortgage_license":
					$in_link = "/state-mortgage-licenses";
					break;
				case "tour_album":
					$in_link = "/careers";
					break;
				case "terms_and_disclosure":
					$in_link = "/";
					break;
				case "terms_of_use":
					$in_link = "/terms-of-use";
					break;
				case "disclosures":
					$in_link = "/disclosures";
					break;
				case "privacy_policy":
					$in_link = "/privacy-policy";
					break;
	}
	$variables['result']['link'] = $in_link;
	$language_interface = \Drupal::languageManager()->getCurrentLanguage();

	$result = $variables['result'];
	$variables['url'] = \Drupal\Component\Utility\UrlHelper::stripDangerousProtocols($result['link']);
	$variables['title'] = $result['title'];
	if (isset($result['language']) && $result['language'] != $language_interface->getId() && $result['language'] != LanguageInterface::LANGCODE_NOT_SPECIFIED) {
		$variables['title_attributes']['lang'] = $result['language'];
		$variables['content_attributes']['lang'] = $result['language'];
	}

	$info = array();
	if (!empty($result['plugin_id'])) {
		$info['plugin_id'] = $result['plugin_id'];
	}
	if (!empty($result['user'])) {
		$info['user'] = $result['user'];
	}
	if (!empty($result['date'])) {
		$info['date'] = format_date($result['date'], 'short');
	}
	if (isset($result['extra']) && is_array($result['extra'])) {
		$info = array_merge($info, $result['extra']);
	}
	// Check for existence. User search does not include snippets.
	$variables['snippet'] = isset($result['snippet']) ? $result['snippet'] : '';
	// Provide separated and grouped meta information..
	$variables['info_split'] = $info;
	$variables['info'] = array(
		'#type' => 'inline_template',
		'#template' => '{{ info|safe_join(" - ") }}',
		'#context' => array('info' => $info),
	);
}
function basis_preprocess_item_list(&$variables) {
	$variables['list_type'] = "ul";
	$variables['title'] = "Search Results";
}